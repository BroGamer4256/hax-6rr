use num_derive::{FromPrimitive, ToPrimitive};
use strum::EnumIter;
use url::Url;

include!(concat!(env!("OUT_DIR"), "/wm.protobuf.rs"));

pub async fn send_request<I: prost::Message, O: prost::Message + Default>(
	req: I,
	server: &Url,
	path: &str,
) -> anyhow::Result<O> {
	let client = reqwest::Client::builder()
		.danger_accept_invalid_certs(true)
		.build()?;

	let res = client
		.post(dbg!(format!("{server}wmmt6/{path}")))
		.body(req.encode_to_vec())
		.header("user-agent", "V388 Client; 285013501138")
		.header("cache-control", "no-cache")
		.header("accept", "application/x-protobuf; revision=12056")
		.header("content-type", "application/x-protobuf; revision=12056")
		.send()
		.await
		.map_err(|err| dbg!(err))?;

	if res.status() != 200 {
		dbg!(res);
		return Err(anyhow::format_err!("Request failed"));
	}
	let bytes = res.bytes().await.map_err(|err| dbg!(err))?;
	Ok(O::decode(bytes).map_err(|err| dbg!(err))?)
}

pub trait GetCategory {
	fn category() -> ItemCategory;
}

#[derive(FromPrimitive, ToPrimitive, EnumIter)]
pub enum Bgms {
	WMMT5 = 6,
	WMMT4 = 5,
	WMMT3 = 1,
	OUTRUN = 2,
	WMMT2 = 3,
	WMR = 4,
}

impl ToString for Bgms {
	fn to_string(&self) -> String {
		match self {
			Bgms::WMMT5 => String::from("WMMT 5/5DX/5DX+"),
			Bgms::WMMT4 => String::from("WMMT 4"),
			Bgms::WMMT3 => String::from("WMMT 3/3DX/3DX+"),
			Bgms::OUTRUN => String::from("10 Outrun"),
			Bgms::WMMT2 => String::from("WMMT 1/2"),
			Bgms::WMR => String::from("WMR"),
		}
	}
}

impl GetCategory for Bgms {
	fn category() -> ItemCategory {
		ItemCategory::CatBgm
	}
}

#[derive(FromPrimitive, ToPrimitive, EnumIter)]
pub enum Meters {
	Namco = 1,
	StoryYellow = 2,
	StoryRed = 3,
	UnkSpecial = 4,
	StoryBlue = 5,
	StoryCarbon = 6,
	NaviMetalBlack = 7,
	NaviMetalRed = 8,
	NaviCyberBlue = 9,
	NaviCyberRed = 10,
	NaviAluminiumBlue = 11,
	NaviAluminiumRed = 12,
	NaviCamoGreen = 13,
	NaviCamoBrown = 14,
	UnkLeatherBlack = 15,
	UnkLeatherBrown = 16,
	UnkShipWheelBrown = 17,
	UnkShipWheelBlue = 18,
	NaviFlameRed = 19,
	NaviFlameBlue = 20,
	NaviSilverWork = 21,
	NaviGoldWork = 22,
	VsorgSteampunkGold = 23,
	VsorgSteampunkGreen = 24,
	VsorgDragonGold = 25,
	VsorgDragonBlue = 26,
	VsorgLightLineBlue = 27,
	VsorgLightLineOrange = 28,
	StoryPro = 29,
	StoryClassic = 30,
	StoryDigitalBlue = 31,
	StoryHighEndRed = 32,
	StoryDigitalYellow = 33,
	StoryHighEndYellow = 34,
	VsorgSunOrange = 35,
	VsorgSunRed = 36,
	VsorgMoonYellow = 37,
	VsorgMoonBlue = 38,
	VsorgGalaxyBlue = 39,
	VsorgGalaxyPurple = 40,
	Supra = 41,
	M4 = 42,
	KoshienFirstGold = 43,
	KoshienFirstPurple = 44,
	KoshienSecondGold = 45,
	KoshienSecondPurple = 46,
	KoshienThirdGold = 47,
	KoshienThirPurple = 48,
	NamcoPixel = 49,
}

impl ToString for Meters {
	fn to_string(&self) -> String {
		match self {
			Meters::Namco => String::from("Namco"),
			Meters::StoryYellow => String::from("Story Yellow"),
			Meters::StoryRed => String::from("Story Red"),
			Meters::UnkSpecial => String::from("Unknown Special"),
			Meters::StoryBlue => String::from("Story Blue"),
			Meters::StoryCarbon => String::from("Story Carbon"),
			Meters::NaviMetalBlack => String::from("Navigator Metal Black"),
			Meters::NaviMetalRed => String::from("Navigator Metal Red"),
			Meters::NaviCyberBlue => String::from("Navigator Cyber Blue"),
			Meters::NaviCyberRed => String::from("Navigator Cyber Red"),
			Meters::NaviAluminiumBlue => String::from("Navigator Aluminium Blue"),
			Meters::NaviAluminiumRed => String::from("Navigator Aluminium Red"),
			Meters::NaviCamoGreen => String::from("Navigator Camo Green"),
			Meters::NaviCamoBrown => String::from("Navigator Camo Brown"),
			Meters::UnkLeatherBlack => String::from("Unknown Leather Black"),
			Meters::UnkLeatherBrown => String::from("Unknown Leather Brown"),
			Meters::UnkShipWheelBrown => String::from("Unknown Ship Wheel Brown"),
			Meters::UnkShipWheelBlue => String::from("Unknown Ship Wheel Blue"),
			Meters::NaviFlameRed => String::from("Navigator Flame Red"),
			Meters::NaviFlameBlue => String::from("Navigator Flame Blue"),
			Meters::NaviSilverWork => String::from("Navigator Silverwork"),
			Meters::NaviGoldWork => String::from("Navigator Goldwork"),
			Meters::VsorgSteampunkGold => String::from("VSORG Steampunk Gold"),
			Meters::VsorgSteampunkGreen => String::from("VSORG Steampunk Green"),
			Meters::VsorgDragonGold => String::from("VSORG Dragon Gold"),
			Meters::VsorgDragonBlue => String::from("VSORG Blue"),
			Meters::VsorgLightLineBlue => String::from("VSORG Light Line Blue"),
			Meters::VsorgLightLineOrange => String::from("VSORG Light Line Orange"),
			Meters::StoryPro => String::from("Story Pro"),
			Meters::StoryClassic => String::from("Story Classic"),
			Meters::StoryDigitalBlue => String::from("Story Digital Blue"),
			Meters::StoryHighEndRed => String::from("Story High-end Red"),
			Meters::StoryDigitalYellow => String::from("Story Digital Yellow"),
			Meters::StoryHighEndYellow => String::from("Story High-end Yellow"),
			Meters::VsorgSunOrange => String::from("VSORG Sun Orange"),
			Meters::VsorgSunRed => String::from("VSORG Sun Red"),
			Meters::VsorgMoonYellow => String::from("VSORG Moon Yellow"),
			Meters::VsorgMoonBlue => String::from("VSORG Moon Blue"),
			Meters::VsorgGalaxyBlue => String::from("VSORG Galaxy Blue"),
			Meters::VsorgGalaxyPurple => String::from("VSORG Galaxy Purple"),
			Meters::Supra => String::from("Supra"),
			Meters::M4 => String::from("M4"),
			Meters::KoshienFirstGold => String::from("Koshien First Gold"),
			Meters::KoshienFirstPurple => String::from("Koshien First Purple"),
			Meters::KoshienSecondGold => String::from("Koshien Second Gold"),
			Meters::KoshienSecondPurple => String::from("Koshien Second Purple"),
			Meters::KoshienThirdGold => String::from("Koshien Third Gold"),
			Meters::KoshienThirPurple => String::from("Koshien Third Purple"),
			Meters::NamcoPixel => String::from("Namco Pixel"),
		}
	}
}

impl GetCategory for Meters {
	fn category() -> ItemCategory {
		ItemCategory::CatMeter
	}
}

#[derive(FromPrimitive, ToPrimitive, EnumIter)]
pub enum Nameplates {
	Customcolor = 1,
	Steel = 2,
	Carbon = 3,
	Tramp = 4,
	Flame = 5,
	Pegasus = 6,
	JapanesePattern1 = 7,
	Camo = 8,
	Wood = 9,
	Dangerous = 10,
	Sticker = 11,
	Lion = 12,
	Casual = 13,
	Metal = 14,
	Tropical = 15,
	JapaneseCards = 16,
	Graffiti = 17,
	Phoenix = 18,
	Thunder = 19,
	IDTag = 20,
	Wall = 21,
	Animal = 22,
	PaintSplash = 23,
	DragonGod = 24,
	Customcolor2 = 25,
	Animal2 = 26,
	Flame2 = 27,
	Floral = 28,
	Classic = 29,
	Tiger = 30,
	Neon = 31,
	JapanesePattern2 = 32,
	Dangerous2 = 33,
	Nautical = 34,
	Silvercraft = 35,
	Bear = 36,
	Simple = 37,
	Raggae = 38,
	Casino = 39,
	Decorative = 40,
	KoiFish = 41,
	Crocodile = 42,
	PaintSplash2 = 43,
	Tropical2 = 44,
	SPACE = 45,
	Monogram = 46,
	Studs = 47,
	Elephant = 48,
	Casual2 = 49,
	Relief = 50,
	Mechanical = 51,
	Graffiti2 = 52,
	Onigawara = 53,
	Wolf = 54,
	FirstSunrise = 55,
	NewYears = 56,
	Valentines = 57,
	OgresOut = 58,
	DollFestival = 59,
	Japanified = 60,
	Blossoms = 61,
	PetalStorm = 62,
	CarpStreamer = 63,
	Helmet = 64,
	Rainbow = 65,
	RainyDay = 66,
	MagpieBridge = 67,
	Tanabata = 68,
	SummerSun = 69,
	SummerSea = 70,
	MoonRabbit = 71,
	LunarHare = 72,
	Bat = 73,
	Halloween = 74,
	Millennium = 75,
	PowerfulGods = 76,
	MerryXmas = 77,
	SantaClaus = 78,
	BlackTiger = 79,
	SilverTiger = 80,
	BlackBear = 81,
	SilverBear = 82,
	BlackCrocodile = 83,
	SilverCrocodile = 84,
	BlackElephant = 85,
	SilverElephant = 86,
	BlackWolf = 87,
	SilverWolf = 88,
	Glitter = 89,
	Comic = 90,
	Forest = 91,
	Bandana = 92,
	JapanesePattern3 = 93,
	Scorpion = 94,
	Road = 95,
	Tigerstripe = 96,
	PinStripe = 97,
	Graffiti3 = 98,
	Crystal = 99,
	Bee = 100,
	Metropolis = 101,
	WOOFER = 102,
	Degital = 103,
	Punk = 104,
	Leather = 105,
	Shark = 106,
	HappyNewYear = 107,
	Snow = 108,
	AntiValentine = 109,
	Lady = 110,
	Geisha = 111,
	Emblem = 112,
	CherryBlossoms = 113,
	Lines = 114,
	SAMURAI = 115,
	Circles = 116,
	Rain = 117,
	NINJA = 118,
	MilkyWay = 119,
	Jellyfish = 120,
	Fireworks = 121,
	Jurassic = 122,
	MoonViewing = 123,
	Peacock = 124,
	Halloween2 = 125,
	Electron = 126,
	Rocket = 127,
	Dragon = 128,
	Santa = 129,
	BuildingBlocks = 130,
	BlackScorpion = 131,
	SilverScorpion = 132,
	BlackHornet = 133,
	SilverHornet = 134,
	BlackShark = 135,
	SilverShark = 136,
	OldCounter = 137,
	Flames = 138,
	Cracks = 139,
	Feathers = 140,
	Sharkmouth = 141,
	Triceratops = 142,
	Protector = 143,
	Pirates = 144,
	Letter = 145,
	Hexagon = 146,
	Sumie = 147,
	Pterosaur = 148,
	Particle = 149,
	Raimon = 150,
	Icons = 151,
	WaterSurface = 152,
	Treasure = 153,
	Tyrannosaur = 154,
	Steampunk = 155,
	Dragon2 = 157,
	Luminescence = 159,
	XmasCard = 161,
	XmasTree = 162,
	Snowboard = 163,
	RoadRacer = 164,
	Ogre = 165,
	Geoglyph = 166,
	Pixels = 167,
	Gothic = 168,
	NightBlossoms = 169,
	EasterBunny = 170,
	Helmet2 = 171,
	Carp = 172,
	RainCharm = 173,
	CyberCity = 174,
	FunkyFlowers = 175,
	Island = 176,
	Sea = 177,
	BikiniGirl = 178,
	AutumnNight = 179,
	Hannya = 180,
	AUTUMNLEAVES = 181,
	Halloweengirl = 182,
	ThrashMetal = 183,
	Anomalocaris = 184,
	Reindeer = 185,
	Guitar = 186,
	NewYears2 = 187,
	Interface = 188,
	BlackTriceratops = 189,
	SilverTriceratops = 190,
	BlackPterosaur = 191,
	SilverPterosaur = 192,
	BlackTyrannosaur = 193,
	SilverTyrannosaur = 194,
	AUSTRALIA = 195,
	CHINA = 196,
	SINGAPORE = 197,
	INDONESIA = 198,
	JAPAN = 199,
	Yoyo = 200,
	Abstract = 201,
	Crow = 202,
	LeatherMesh = 203,
	Fantasy = 204,
	Unicorn = 205,
	Snowflake = 206,
	WorkingGirl = 207,
	WoodenMosaic = 208,
	Rocket2 = 209,
	TreadPattern = 210,
	Griffon = 211,
	Beautyberry = 212,
	Silvercraft2 = 213,
	Ortega = 214,
	Cyber = 215,
	City = 216,
	Wyvern = 217,
	Holiday = 218,
	PureBeauty = 219,
	Gecko = 220,
	TieDye = 221,
	Tribal = 222,
	Gargoyle = 223,
	SummerGirl = 224,
	Butterfly = 225,
	Robot = 226,
	Studs2 = 227,
	Gemstone = 228,
	Minotaur = 229,
	Snowman = 230,
	Pop = 231,
	FamilyCrest = 232,
	SprinterCamo = 233,
	Ukiyoe = 234,
	Cerberus = 235,
	Sun = 236,
	Moon = 237,
	Galaxy = 238,
	HongKong = 239,
	Philippines = 240,
	Thailand = 241,
	WhiteTiger = 242,
	GoldTiger = 243,
	WhiteDragon = 244,
	GoldDragon = 245,
	DragonandTiger = 246,
	CustomColor1EX = 247,
	ParticleEX = 248,
	JapanesePatternEX = 249,
	CamoEX = 250,
	Jurassic2 = 251,
	Beetle = 252,
	SteelEX = 253,
	Animal1EX = 254,
	Dangerous1EX = 255,
	Graffiti2EX = 256,
	Kabuki = 257,
	PrayingMantis = 258,
	CarbonEX = 259,
	PaintSplash2EX = 260,
	Flame2EX = 261,
	HexagonEX = 262,
	Chainsaw = 263,
	Spider = 264,
	King = 265,
	King2 = 266,
	Joker = 267,
	Joker2 = 268,
	Witch = 269,
	Witch2 = 270,
	Knight = 271,
	Knight2 = 272,
	Werewolf = 273,
	Werewolf2 = 274,
	Vampire = 275,
	Vampire2 = 276,
}

impl Nameplates {
	fn get_variation_count(&self) -> u32 {
		match self {
			Nameplates::Customcolor => 6,
			Nameplates::Steel => 4,
			Nameplates::Carbon => 4,
			Nameplates::Tramp => 2,
			Nameplates::Flame => 3,
			Nameplates::Pegasus => 1,
			Nameplates::JapanesePattern1 => 5,
			Nameplates::Camo => 4,
			Nameplates::Wood => 4,
			Nameplates::Dangerous => 3,
			Nameplates::Sticker => 2,
			Nameplates::Lion => 1,
			Nameplates::Casual => 5,
			Nameplates::Metal => 4,
			Nameplates::Tropical => 4,
			Nameplates::JapaneseCards => 2,
			Nameplates::Graffiti => 2,
			Nameplates::Phoenix => 1,
			Nameplates::Thunder => 4,
			Nameplates::IDTag => 3,
			Nameplates::Wall => 4,
			Nameplates::Animal => 5,
			Nameplates::PaintSplash => 6,
			Nameplates::DragonGod => 1,
			Nameplates::Customcolor2 => 6,
			Nameplates::Animal2 => 6,
			Nameplates::Flame2 => 3,
			Nameplates::Floral => 4,
			Nameplates::Classic => 2,
			Nameplates::Tiger => 1,
			Nameplates::Neon => 6,
			Nameplates::JapanesePattern2 => 5,
			Nameplates::Dangerous2 => 4,
			Nameplates::Nautical => 4,
			Nameplates::Silvercraft => 3,
			Nameplates::Bear => 1,
			Nameplates::Simple => 6,
			Nameplates::Raggae => 4,
			Nameplates::Casino => 3,
			Nameplates::Decorative => 5,
			Nameplates::KoiFish => 4,
			Nameplates::Crocodile => 1,
			Nameplates::PaintSplash2 => 5,
			Nameplates::Tropical2 => 3,
			Nameplates::SPACE => 3,
			Nameplates::Monogram => 4,
			Nameplates::Studs => 3,
			Nameplates::Elephant => 1,
			Nameplates::Casual2 => 5,
			Nameplates::Relief => 2,
			Nameplates::Mechanical => 6,
			Nameplates::Graffiti2 => 4,
			Nameplates::Onigawara => 3,
			Nameplates::Wolf => 1,
			Nameplates::FirstSunrise => 1,
			Nameplates::NewYears => 2,
			Nameplates::Valentines => 3,
			Nameplates::OgresOut => 4,
			Nameplates::DollFestival => 4,
			Nameplates::Japanified => 3,
			Nameplates::Blossoms => 5,
			Nameplates::PetalStorm => 4,
			Nameplates::CarpStreamer => 4,
			Nameplates::Helmet => 5,
			Nameplates::Rainbow => 3,
			Nameplates::RainyDay => 4,
			Nameplates::MagpieBridge => 4,
			Nameplates::Tanabata => 4,
			Nameplates::SummerSun => 2,
			Nameplates::SummerSea => 3,
			Nameplates::MoonRabbit => 3,
			Nameplates::LunarHare => 5,
			Nameplates::Bat => 4,
			Nameplates::Halloween => 3,
			Nameplates::Millennium => 1,
			Nameplates::PowerfulGods => 4,
			Nameplates::MerryXmas => 6,
			Nameplates::SantaClaus => 4,
			Nameplates::BlackTiger => 1,
			Nameplates::SilverTiger => 1,
			Nameplates::BlackBear => 1,
			Nameplates::SilverBear => 1,
			Nameplates::BlackCrocodile => 1,
			Nameplates::SilverCrocodile => 1,
			Nameplates::BlackElephant => 1,
			Nameplates::SilverElephant => 1,
			Nameplates::BlackWolf => 1,
			Nameplates::SilverWolf => 1,
			Nameplates::Glitter => 4,
			Nameplates::Comic => 4,
			Nameplates::Forest => 4,
			Nameplates::Bandana => 4,
			Nameplates::JapanesePattern3 => 2,
			Nameplates::Scorpion => 1,
			Nameplates::Road => 4,
			Nameplates::Tigerstripe => 4,
			Nameplates::PinStripe => 4,
			Nameplates::Graffiti3 => 4,
			Nameplates::Crystal => 2,
			Nameplates::Bee => 1,
			Nameplates::Metropolis => 4,
			Nameplates::WOOFER => 4,
			Nameplates::Degital => 4,
			Nameplates::Punk => 4,
			Nameplates::Leather => 2,
			Nameplates::Shark => 1,
			Nameplates::HappyNewYear => 4,
			Nameplates::Snow => 4,
			Nameplates::AntiValentine => 4,
			Nameplates::Lady => 4,
			Nameplates::Geisha => 4,
			Nameplates::Emblem => 4,
			Nameplates::CherryBlossoms => 4,
			Nameplates::Lines => 4,
			Nameplates::SAMURAI => 4,
			Nameplates::Circles => 4,
			Nameplates::Rain => 4,
			Nameplates::NINJA => 4,
			Nameplates::MilkyWay => 4,
			Nameplates::Jellyfish => 4,
			Nameplates::Fireworks => 4,
			Nameplates::Jurassic => 4,
			Nameplates::MoonViewing => 4,
			Nameplates::Peacock => 4,
			Nameplates::Halloween2 => 4,
			Nameplates::Electron => 4,
			Nameplates::Rocket => 4,
			Nameplates::Dragon => 4,
			Nameplates::Santa => 4,
			Nameplates::BuildingBlocks => 4,
			Nameplates::BlackScorpion => 1,
			Nameplates::SilverScorpion => 1,
			Nameplates::BlackHornet => 1,
			Nameplates::SilverHornet => 1,
			Nameplates::BlackShark => 1,
			Nameplates::SilverShark => 1,
			Nameplates::OldCounter => 4,
			Nameplates::Flames => 4,
			Nameplates::Cracks => 4,
			Nameplates::Feathers => 4,
			Nameplates::Sharkmouth => 2,
			Nameplates::Triceratops => 1,
			Nameplates::Protector => 4,
			Nameplates::Pirates => 4,
			Nameplates::Letter => 4,
			Nameplates::Hexagon => 4,
			Nameplates::Sumie => 2,
			Nameplates::Pterosaur => 1,
			Nameplates::Particle => 4,
			Nameplates::Raimon => 4,
			Nameplates::Icons => 4,
			Nameplates::WaterSurface => 4,
			Nameplates::Treasure => 2,
			Nameplates::Tyrannosaur => 1,
			Nameplates::Steampunk => 1,
			Nameplates::Dragon2 => 1,
			Nameplates::Luminescence => 1,
			Nameplates::XmasCard => 4,
			Nameplates::XmasTree => 4,
			Nameplates::Snowboard => 4,
			Nameplates::RoadRacer => 4,
			Nameplates::Ogre => 4,
			Nameplates::Geoglyph => 4,
			Nameplates::Pixels => 4,
			Nameplates::Gothic => 4,
			Nameplates::NightBlossoms => 4,
			Nameplates::EasterBunny => 4,
			Nameplates::Helmet2 => 4,
			Nameplates::Carp => 4,
			Nameplates::RainCharm => 4,
			Nameplates::CyberCity => 4,
			Nameplates::FunkyFlowers => 4,
			Nameplates::Island => 4,
			Nameplates::Sea => 4,
			Nameplates::BikiniGirl => 4,
			Nameplates::AutumnNight => 4,
			Nameplates::Hannya => 4,
			Nameplates::AUTUMNLEAVES => 4,
			Nameplates::Halloweengirl => 4,
			Nameplates::ThrashMetal => 4,
			Nameplates::Anomalocaris => 4,
			Nameplates::Reindeer => 4,
			Nameplates::Guitar => 4,
			Nameplates::NewYears2 => 4,
			Nameplates::Interface => 4,
			Nameplates::BlackTriceratops => 1,
			Nameplates::SilverTriceratops => 1,
			Nameplates::BlackPterosaur => 1,
			Nameplates::SilverPterosaur => 1,
			Nameplates::BlackTyrannosaur => 1,
			Nameplates::SilverTyrannosaur => 1,
			Nameplates::AUSTRALIA => 1,
			Nameplates::CHINA => 1,
			Nameplates::SINGAPORE => 1,
			Nameplates::INDONESIA => 1,
			Nameplates::JAPAN => 1,
			Nameplates::Yoyo => 4,
			Nameplates::Abstract => 4,
			Nameplates::Crow => 4,
			Nameplates::LeatherMesh => 4,
			Nameplates::Fantasy => 2,
			Nameplates::Unicorn => 1,
			Nameplates::Snowflake => 4,
			Nameplates::WorkingGirl => 4,
			Nameplates::WoodenMosaic => 4,
			Nameplates::Rocket2 => 4,
			Nameplates::TreadPattern => 2,
			Nameplates::Griffon => 1,
			Nameplates::Beautyberry => 4,
			Nameplates::Silvercraft2 => 4,
			Nameplates::Ortega => 4,
			Nameplates::Cyber => 4,
			Nameplates::City => 2,
			Nameplates::Wyvern => 1,
			Nameplates::Holiday => 4,
			Nameplates::PureBeauty => 4,
			Nameplates::Gecko => 4,
			Nameplates::TieDye => 4,
			Nameplates::Tribal => 2,
			Nameplates::Gargoyle => 1,
			Nameplates::SummerGirl => 4,
			Nameplates::Butterfly => 4,
			Nameplates::Robot => 4,
			Nameplates::Studs2 => 4,
			Nameplates::Gemstone => 2,
			Nameplates::Minotaur => 1,
			Nameplates::Snowman => 4,
			Nameplates::Pop => 4,
			Nameplates::FamilyCrest => 4,
			Nameplates::SprinterCamo => 4,
			Nameplates::Ukiyoe => 2,
			Nameplates::Cerberus => 1,
			Nameplates::Sun => 1,
			Nameplates::Moon => 1,
			Nameplates::Galaxy => 1,
			Nameplates::HongKong => 1,
			Nameplates::Philippines => 1,
			Nameplates::Thailand => 1,
			Nameplates::WhiteTiger => 1,
			Nameplates::GoldTiger => 1,
			Nameplates::WhiteDragon => 1,
			Nameplates::GoldDragon => 1,
			Nameplates::DragonandTiger => 1,
			Nameplates::CustomColor1EX => 6,
			Nameplates::ParticleEX => 4,
			Nameplates::JapanesePatternEX => 5,
			Nameplates::CamoEX => 4,
			Nameplates::Jurassic2 => 2,
			Nameplates::Beetle => 1,
			Nameplates::SteelEX => 4,
			Nameplates::Animal1EX => 5,
			Nameplates::Dangerous1EX => 3,
			Nameplates::Graffiti2EX => 4,
			Nameplates::Kabuki => 2,
			Nameplates::PrayingMantis => 1,
			Nameplates::CarbonEX => 4,
			Nameplates::PaintSplash2EX => 5,
			Nameplates::Flame2EX => 3,
			Nameplates::HexagonEX => 4,
			Nameplates::Chainsaw => 2,
			Nameplates::Spider => 1,
			Nameplates::King => 1,
			Nameplates::King2 => 1,
			Nameplates::Joker => 1,
			Nameplates::Joker2 => 1,
			Nameplates::Witch => 1,
			Nameplates::Witch2 => 1,
			Nameplates::Knight => 1,
			Nameplates::Knight2 => 1,
			Nameplates::Werewolf => 1,
			Nameplates::Werewolf2 => 1,
			Nameplates::Vampire => 1,
			Nameplates::Vampire2 => 1,
		}
	}
}

impl ToString for Nameplates {
	fn to_string(&self) -> String {
		let variations = self.get_variation_count();
		let variation_word = if variations > 1 {
			"Variations"
		} else {
			"Variation"
		};
		match self {
			Nameplates::Customcolor => {
				format!("{} ({} {})", "Custom color", variations, variation_word)
			}
			Nameplates::Steel => format!("{} ({} {})", "Steel", variations, variation_word),
			Nameplates::Carbon => format!("{} ({} {})", "Carbon", variations, variation_word),
			Nameplates::Tramp => format!("{} ({} {})", "Tramp", variations, variation_word),
			Nameplates::Flame => format!("{} ({} {})", "Flame", variations, variation_word),
			Nameplates::Pegasus => format!("{} ({} {})", "Pegasus", variations, variation_word),
			Nameplates::JapanesePattern1 => {
				format!("{} ({} {})", "Japanese Pattern", variations, variation_word)
			}
			Nameplates::Camo => format!("{} ({} {})", "Camo", variations, variation_word),
			Nameplates::Wood => format!("{} ({} {})", "Wood", variations, variation_word),
			Nameplates::Dangerous => format!("{} ({} {})", "Dangerous", variations, variation_word),
			Nameplates::Sticker => format!("{} ({} {})", "Sticker", variations, variation_word),
			Nameplates::Lion => format!("{} ({} {})", "Lion", variations, variation_word),
			Nameplates::Casual => format!("{} ({} {})", "Casual", variations, variation_word),
			Nameplates::Metal => format!("{} ({} {})", "Metal", variations, variation_word),
			Nameplates::Tropical => format!("{} ({} {})", "Tropical", variations, variation_word),
			Nameplates::JapaneseCards => {
				format!("{} ({} {})", "Japanese Cards", variations, variation_word)
			}
			Nameplates::Graffiti => format!("{} ({} {})", "Graffiti", variations, variation_word),
			Nameplates::Phoenix => format!("{} ({} {})", "Phoenix", variations, variation_word),
			Nameplates::Thunder => format!("{} ({} {})", "Thunder", variations, variation_word),
			Nameplates::IDTag => format!("{} ({} {})", "ID Tag", variations, variation_word),
			Nameplates::Wall => format!("{} ({} {})", "Wall", variations, variation_word),
			Nameplates::Animal => format!("{} ({} {})", "Animal", variations, variation_word),
			Nameplates::PaintSplash => {
				format!("{} ({} {})", "Paint Splash", variations, variation_word)
			}
			Nameplates::DragonGod => {
				format!("{} ({} {})", "Dragon God", variations, variation_word)
			}
			Nameplates::Customcolor2 => {
				format!("{} ({} {})", "Custom color 2", variations, variation_word)
			}
			Nameplates::Animal2 => format!("{} ({} {})", "Animal 2", variations, variation_word),
			Nameplates::Flame2 => format!("{} ({} {})", "Flame 2", variations, variation_word),
			Nameplates::Floral => format!("{} ({} {})", "Floral", variations, variation_word),
			Nameplates::Classic => format!("{} ({} {})", "Classic", variations, variation_word),
			Nameplates::Tiger => format!("{} ({} {})", "Tiger", variations, variation_word),
			Nameplates::Neon => format!("{} ({} {})", "Neon", variations, variation_word),
			Nameplates::JapanesePattern2 => format!(
				"{} ({} {})",
				"Japanese Pattern 2", variations, variation_word
			),
			Nameplates::Dangerous2 => {
				format!("{} ({} {})", "Dangerous 2", variations, variation_word)
			}
			Nameplates::Nautical => format!("{} ({} {})", "Nautical", variations, variation_word),
			Nameplates::Silvercraft => {
				format!("{} ({} {})", "Silvercraft", variations, variation_word)
			}
			Nameplates::Bear => format!("{} ({} {})", "Bear", variations, variation_word),
			Nameplates::Simple => format!("{} ({} {})", "Simple", variations, variation_word),
			Nameplates::Raggae => format!("{} ({} {})", "Raggae", variations, variation_word),
			Nameplates::Casino => format!("{} ({} {})", "Casino", variations, variation_word),
			Nameplates::Decorative => {
				format!("{} ({} {})", "Decorative", variations, variation_word)
			}
			Nameplates::KoiFish => format!("{} ({} {})", "Koi Fish", variations, variation_word),
			Nameplates::Crocodile => format!("{} ({} {})", "Crocodile", variations, variation_word),
			Nameplates::PaintSplash2 => {
				format!("{} ({} {})", "Paint Splash 2", variations, variation_word)
			}
			Nameplates::Tropical2 => {
				format!("{} ({} {})", "Tropical 2", variations, variation_word)
			}
			Nameplates::SPACE => format!("{} ({} {})", "SPACE", variations, variation_word),
			Nameplates::Monogram => format!("{} ({} {})", "Monogram", variations, variation_word),
			Nameplates::Studs => format!("{} ({} {})", "Studs", variations, variation_word),
			Nameplates::Elephant => format!("{} ({} {})", "Elephant", variations, variation_word),
			Nameplates::Casual2 => format!("{} ({} {})", "Casual 2", variations, variation_word),
			Nameplates::Relief => format!("{} ({} {})", "Relief", variations, variation_word),
			Nameplates::Mechanical => {
				format!("{} ({} {})", "Mechanical", variations, variation_word)
			}
			Nameplates::Graffiti2 => {
				format!("{} ({} {})", "Graffiti 2", variations, variation_word)
			}
			Nameplates::Onigawara => format!("{} ({} {})", "Onigawara", variations, variation_word),
			Nameplates::Wolf => format!("{} ({} {})", "Wolf", variations, variation_word),
			Nameplates::FirstSunrise => {
				format!("{} ({} {})", "First Sunrise", variations, variation_word)
			}
			Nameplates::NewYears => format!("{} ({} {})", "New Year's", variations, variation_word),
			Nameplates::Valentines => {
				format!("{} ({} {})", "Valentine's", variations, variation_word)
			}
			Nameplates::OgresOut => format!("{} ({} {})", "Ogres Out!", variations, variation_word),
			Nameplates::DollFestival => {
				format!("{} ({} {})", "Doll Festival", variations, variation_word)
			}
			Nameplates::Japanified => {
				format!("{} ({} {})", "Japanified", variations, variation_word)
			}
			Nameplates::Blossoms => format!("{} ({} {})", "Blossoms", variations, variation_word),
			Nameplates::PetalStorm => {
				format!("{} ({} {})", "Petal Storm", variations, variation_word)
			}
			Nameplates::CarpStreamer => {
				format!("{} ({} {})", "Carp Streamer", variations, variation_word)
			}
			Nameplates::Helmet => format!("{} ({} {})", "Helmet", variations, variation_word),
			Nameplates::Rainbow => format!("{} ({} {})", "Rainbow", variations, variation_word),
			Nameplates::RainyDay => format!("{} ({} {})", "Rainy Day", variations, variation_word),
			Nameplates::MagpieBridge => {
				format!("{} ({} {})", "Magpie Bridge", variations, variation_word)
			}
			Nameplates::Tanabata => format!("{} ({} {})", "Tanabata", variations, variation_word),
			Nameplates::SummerSun => {
				format!("{} ({} {})", "Summer Sun", variations, variation_word)
			}
			Nameplates::SummerSea => {
				format!("{} ({} {})", "Summer Sea", variations, variation_word)
			}
			Nameplates::MoonRabbit => {
				format!("{} ({} {})", "Moon Rabbit!", variations, variation_word)
			}
			Nameplates::LunarHare => {
				format!("{} ({} {})", "Lunar Hare", variations, variation_word)
			}
			Nameplates::Bat => format!("{} ({} {})", "Bat", variations, variation_word),
			Nameplates::Halloween => format!("{} ({} {})", "Halloween", variations, variation_word),
			Nameplates::Millennium => {
				format!("{} ({} {})", "Millennium", variations, variation_word)
			}
			Nameplates::PowerfulGods => {
				format!("{} ({} {})", "Powerful Gods", variations, variation_word)
			}
			Nameplates::MerryXmas => {
				format!("{} ({} {})", "Merry X'mas", variations, variation_word)
			}
			Nameplates::SantaClaus => {
				format!("{} ({} {})", "Santa Claus", variations, variation_word)
			}
			Nameplates::BlackTiger => {
				format!("{} ({} {})", "Black Tiger", variations, variation_word)
			}
			Nameplates::SilverTiger => {
				format!("{} ({} {})", "Silver Tiger", variations, variation_word)
			}
			Nameplates::BlackBear => {
				format!("{} ({} {})", "Black Bear", variations, variation_word)
			}
			Nameplates::SilverBear => {
				format!("{} ({} {})", "Silver Bear", variations, variation_word)
			}
			Nameplates::BlackCrocodile => {
				format!("{} ({} {})", "Black Crocodile", variations, variation_word)
			}
			Nameplates::SilverCrocodile => {
				format!("{} ({} {})", "Silver Crocodile", variations, variation_word)
			}
			Nameplates::BlackElephant => {
				format!("{} ({} {})", "Black Elephant", variations, variation_word)
			}
			Nameplates::SilverElephant => {
				format!("{} ({} {})", "Silver Elephant", variations, variation_word)
			}
			Nameplates::BlackWolf => {
				format!("{} ({} {})", "Black Wolf", variations, variation_word)
			}
			Nameplates::SilverWolf => {
				format!("{} ({} {})", "Silver Wolf", variations, variation_word)
			}
			Nameplates::Glitter => format!("{} ({} {})", "Glitter", variations, variation_word),
			Nameplates::Comic => format!("{} ({} {})", "Comic", variations, variation_word),
			Nameplates::Forest => format!("{} ({} {})", "Forest", variations, variation_word),
			Nameplates::Bandana => format!("{} ({} {})", "Bandana", variations, variation_word),
			Nameplates::JapanesePattern3 => format!(
				"{} ({} {})",
				"Japanese Pattern 3", variations, variation_word
			),
			Nameplates::Scorpion => format!("{} ({} {})", "Scorpion", variations, variation_word),
			Nameplates::Road => format!("{} ({} {})", "Road", variations, variation_word),
			Nameplates::Tigerstripe => {
				format!("{} ({} {})", "Tigerstripe", variations, variation_word)
			}
			Nameplates::PinStripe => {
				format!("{} ({} {})", "Pin Stripe", variations, variation_word)
			}
			Nameplates::Graffiti3 => {
				format!("{} ({} {})", "Graffiti 3", variations, variation_word)
			}
			Nameplates::Crystal => format!("{} ({} {})", "Crystal", variations, variation_word),
			Nameplates::Bee => format!("{} ({} {})", "Bee", variations, variation_word),
			Nameplates::Metropolis => {
				format!("{} ({} {})", "Metropolis", variations, variation_word)
			}
			Nameplates::WOOFER => format!("{} ({} {})", "WOOFER", variations, variation_word),
			Nameplates::Degital => format!("{} ({} {})", "Degital", variations, variation_word),
			Nameplates::Punk => format!("{} ({} {})", "Punk", variations, variation_word),
			Nameplates::Leather => format!("{} ({} {})", "Leather", variations, variation_word),
			Nameplates::Shark => format!("{} ({} {})", "Shark", variations, variation_word),
			Nameplates::HappyNewYear => {
				format!("{} ({} {})", "Happy New Year", variations, variation_word)
			}
			Nameplates::Snow => format!("{} ({} {})", "Snow", variations, variation_word),
			Nameplates::AntiValentine => {
				format!("{} ({} {})", "Anti-Valentine", variations, variation_word)
			}
			Nameplates::Lady => format!("{} ({} {})", "Lady", variations, variation_word),
			Nameplates::Geisha => format!("{} ({} {})", "Geisha", variations, variation_word),
			Nameplates::Emblem => format!("{} ({} {})", "Emblem", variations, variation_word),
			Nameplates::CherryBlossoms => {
				format!("{} ({} {})", "Cherry Blossoms", variations, variation_word)
			}
			Nameplates::Lines => format!("{} ({} {})", "Lines", variations, variation_word),
			Nameplates::SAMURAI => format!("{} ({} {})", "SAMURAI", variations, variation_word),
			Nameplates::Circles => format!("{} ({} {})", "Circles", variations, variation_word),
			Nameplates::Rain => format!("{} ({} {})", "Rain", variations, variation_word),
			Nameplates::NINJA => format!("{} ({} {})", "NINJA", variations, variation_word),
			Nameplates::MilkyWay => format!("{} ({} {})", "Milky Way", variations, variation_word),
			Nameplates::Jellyfish => format!("{} ({} {})", "Jellyfish", variations, variation_word),
			Nameplates::Fireworks => format!("{} ({} {})", "Fireworks", variations, variation_word),
			Nameplates::Jurassic => format!("{} ({} {})", "Jurassic", variations, variation_word),
			Nameplates::MoonViewing => {
				format!("{} ({} {})", "Moon Viewing", variations, variation_word)
			}
			Nameplates::Peacock => format!("{} ({} {})", "Peacock", variations, variation_word),
			Nameplates::Halloween2 => {
				format!("{} ({} {})", "Halloween 2", variations, variation_word)
			}
			Nameplates::Electron => format!("{} ({} {})", "Electron", variations, variation_word),
			Nameplates::Rocket => format!("{} ({} {})", "Rocket", variations, variation_word),
			Nameplates::Dragon => format!("{} ({} {})", "Dragon", variations, variation_word),
			Nameplates::Santa => format!("{} ({} {})", "Santa", variations, variation_word),
			Nameplates::BuildingBlocks => {
				format!("{} ({} {})", "Building Blocks", variations, variation_word)
			}
			Nameplates::BlackScorpion => {
				format!("{} ({} {})", "Black Scorpion", variations, variation_word)
			}
			Nameplates::SilverScorpion => {
				format!("{} ({} {})", "Silver Scorpion", variations, variation_word)
			}
			Nameplates::BlackHornet => {
				format!("{} ({} {})", "Black Hornet", variations, variation_word)
			}
			Nameplates::SilverHornet => {
				format!("{} ({} {})", "Silver Hornet", variations, variation_word)
			}
			Nameplates::BlackShark => {
				format!("{} ({} {})", "Black  Shark", variations, variation_word)
			}
			Nameplates::SilverShark => {
				format!("{} ({} {})", "Silver Shark", variations, variation_word)
			}
			Nameplates::OldCounter => {
				format!("{} ({} {})", "Old Counter", variations, variation_word)
			}
			Nameplates::Flames => format!("{} ({} {})", "Flames", variations, variation_word),
			Nameplates::Cracks => format!("{} ({} {})", "Cracks", variations, variation_word),
			Nameplates::Feathers => format!("{} ({} {})", "Feathers", variations, variation_word),
			Nameplates::Sharkmouth => {
				format!("{} ({} {})", "Sharkmouth", variations, variation_word)
			}
			Nameplates::Triceratops => {
				format!("{} ({} {})", "Triceratops", variations, variation_word)
			}
			Nameplates::Protector => format!("{} ({} {})", "Protector", variations, variation_word),
			Nameplates::Pirates => format!("{} ({} {})", "Pirates", variations, variation_word),
			Nameplates::Letter => format!("{} ({} {})", "Letter", variations, variation_word),
			Nameplates::Hexagon => format!("{} ({} {})", "Hexagon", variations, variation_word),
			Nameplates::Sumie => format!("{} ({} {})", "Sumi-e", variations, variation_word),
			Nameplates::Pterosaur => format!("{} ({} {})", "Pterosaur", variations, variation_word),
			Nameplates::Particle => format!("{} ({} {})", "Particle", variations, variation_word),
			Nameplates::Raimon => format!("{} ({} {})", "Raimon", variations, variation_word),
			Nameplates::Icons => format!("{} ({} {})", "Icons", variations, variation_word),
			Nameplates::WaterSurface => {
				format!("{} ({} {})", "Water Surface", variations, variation_word)
			}
			Nameplates::Treasure => format!("{} ({} {})", "Treasure", variations, variation_word),
			Nameplates::Tyrannosaur => {
				format!("{} ({} {})", "Tyrannosaur", variations, variation_word)
			}
			Nameplates::Steampunk => format!("{} ({} {})", "Steampunk", variations, variation_word),
			Nameplates::Dragon2 => format!("{} ({} {})", "Dragon 2", variations, variation_word),
			Nameplates::Luminescence => {
				format!("{} ({} {})", "Luminescence", variations, variation_word)
			}
			Nameplates::XmasCard => format!("{} ({} {})", "X'mas Card", variations, variation_word),
			Nameplates::XmasTree => format!("{} ({} {})", "X'mas Tree", variations, variation_word),
			Nameplates::Snowboard => format!("{} ({} {})", "Snowboard", variations, variation_word),
			Nameplates::RoadRacer => {
				format!("{} ({} {})", "Road Racer", variations, variation_word)
			}
			Nameplates::Ogre => format!("{} ({} {})", "Ogre", variations, variation_word),
			Nameplates::Geoglyph => format!("{} ({} {})", "Geoglyph", variations, variation_word),
			Nameplates::Pixels => format!("{} ({} {})", "Pixels", variations, variation_word),
			Nameplates::Gothic => format!("{} ({} {})", "Gothic", variations, variation_word),
			Nameplates::NightBlossoms => {
				format!("{} ({} {})", "Night Blossoms", variations, variation_word)
			}
			Nameplates::EasterBunny => {
				format!("{} ({} {})", "Easter Bunny", variations, variation_word)
			}
			Nameplates::Helmet2 => format!("{} ({} {})", "Helmet 2", variations, variation_word),
			Nameplates::Carp => format!("{} ({} {})", "Carp", variations, variation_word),
			Nameplates::RainCharm => {
				format!("{} ({} {})", "Rain Charm", variations, variation_word)
			}
			Nameplates::CyberCity => {
				format!("{} ({} {})", "Cyber City", variations, variation_word)
			}
			Nameplates::FunkyFlowers => {
				format!("{} ({} {})", "Funky Flowers", variations, variation_word)
			}
			Nameplates::Island => format!("{} ({} {})", "Island", variations, variation_word),
			Nameplates::Sea => format!("{} ({} {})", "Sea", variations, variation_word),
			Nameplates::BikiniGirl => {
				format!("{} ({} {})", "Bikini Girl", variations, variation_word)
			}
			Nameplates::AutumnNight => {
				format!("{} ({} {})", "Autumn Night", variations, variation_word)
			}
			Nameplates::Hannya => format!("{} ({} {})", "Hannya", variations, variation_word),
			Nameplates::AUTUMNLEAVES => {
				format!("{} ({} {})", "AUTUMN LEAVES", variations, variation_word)
			}
			Nameplates::Halloweengirl => {
				format!("{} ({} {})", "Halloween girl", variations, variation_word)
			}
			Nameplates::ThrashMetal => {
				format!("{} ({} {})", "Thrash Metal", variations, variation_word)
			}
			Nameplates::Anomalocaris => {
				format!("{} ({} {})", "Anomalocaris", variations, variation_word)
			}
			Nameplates::Reindeer => format!("{} ({} {})", "Reindeer", variations, variation_word),
			Nameplates::Guitar => format!("{} ({} {})", "Guitar", variations, variation_word),
			Nameplates::NewYears2 => {
				format!("{} ({} {})", "New Year's 2", variations, variation_word)
			}
			Nameplates::Interface => format!("{} ({} {})", "Interface", variations, variation_word),
			Nameplates::BlackTriceratops => format!(
				"{} ({} {})",
				"Black Triceratops", variations, variation_word
			),
			Nameplates::SilverTriceratops => format!(
				"{} ({} {})",
				"Silver Triceratops", variations, variation_word
			),
			Nameplates::BlackPterosaur => {
				format!("{} ({} {})", "Black Pterosaur", variations, variation_word)
			}
			Nameplates::SilverPterosaur => {
				format!("{} ({} {})", "Silver Pterosaur", variations, variation_word)
			}
			Nameplates::BlackTyrannosaur => format!(
				"{} ({} {})",
				"Black Tyrannosaur", variations, variation_word
			),
			Nameplates::SilverTyrannosaur => format!(
				"{} ({} {})",
				"Silver Tyrannosaur", variations, variation_word
			),
			Nameplates::AUSTRALIA => format!("{} ({} {})", "AUSTRALIA", variations, variation_word),
			Nameplates::CHINA => format!("{} ({} {})", "CHINA", variations, variation_word),
			Nameplates::SINGAPORE => format!("{} ({} {})", "SINGAPORE", variations, variation_word),
			Nameplates::INDONESIA => format!("{} ({} {})", "INDONESIA", variations, variation_word),
			Nameplates::JAPAN => format!("{} ({} {})", "JAPAN", variations, variation_word),
			Nameplates::Yoyo => format!("{} ({} {})", "Yoyo", variations, variation_word),
			Nameplates::Abstract => format!("{} ({} {})", "Abstract", variations, variation_word),
			Nameplates::Crow => format!("{} ({} {})", "Crow", variations, variation_word),
			Nameplates::LeatherMesh => {
				format!("{} ({} {})", "Leather Mesh", variations, variation_word)
			}
			Nameplates::Fantasy => format!("{} ({} {})", "Fantasy", variations, variation_word),
			Nameplates::Unicorn => format!("{} ({} {})", "Unicorn", variations, variation_word),
			Nameplates::Snowflake => format!("{} ({} {})", "Snowflake", variations, variation_word),
			Nameplates::WorkingGirl => {
				format!("{} ({} {})", "Working Girl", variations, variation_word)
			}
			Nameplates::WoodenMosaic => {
				format!("{} ({} {})", "Wooden Mosaic", variations, variation_word)
			}
			Nameplates::Rocket2 => format!("{} ({} {})", "Rocket 2", variations, variation_word),
			Nameplates::TreadPattern => {
				format!("{} ({} {})", "Tread Pattern", variations, variation_word)
			}
			Nameplates::Griffon => format!("{} ({} {})", "Griffon", variations, variation_word),
			Nameplates::Beautyberry => {
				format!("{} ({} {})", "Beautyberry", variations, variation_word)
			}
			Nameplates::Silvercraft2 => {
				format!("{} ({} {})", "Silvercraft 2", variations, variation_word)
			}
			Nameplates::Ortega => format!("{} ({} {})", "Ortega", variations, variation_word),
			Nameplates::Cyber => format!("{} ({} {})", "Cyber", variations, variation_word),
			Nameplates::City => format!("{} ({} {})", "City", variations, variation_word),
			Nameplates::Wyvern => format!("{} ({} {})", "Wyvern", variations, variation_word),
			Nameplates::Holiday => format!("{} ({} {})", "Holiday", variations, variation_word),
			Nameplates::PureBeauty => {
				format!("{} ({} {})", "Pure Beauty", variations, variation_word)
			}
			Nameplates::Gecko => format!("{} ({} {})", "Gecko", variations, variation_word),
			Nameplates::TieDye => format!("{} ({} {})", "Tie Dye", variations, variation_word),
			Nameplates::Tribal => format!("{} ({} {})", "Tribal", variations, variation_word),
			Nameplates::Gargoyle => format!("{} ({} {})", "Gargoyle", variations, variation_word),
			Nameplates::SummerGirl => {
				format!("{} ({} {})", "Summer Girl", variations, variation_word)
			}
			Nameplates::Butterfly => format!("{} ({} {})", "Butterfly", variations, variation_word),
			Nameplates::Robot => format!("{} ({} {})", "Robot", variations, variation_word),
			Nameplates::Studs2 => format!("{} ({} {})", "Studs 2", variations, variation_word),
			Nameplates::Gemstone => format!("{} ({} {})", "Gemstone", variations, variation_word),
			Nameplates::Minotaur => format!("{} ({} {})", "Minotaur", variations, variation_word),
			Nameplates::Snowman => format!("{} ({} {})", "Snowman", variations, variation_word),
			Nameplates::Pop => format!("{} ({} {})", "Pop", variations, variation_word),
			Nameplates::FamilyCrest => {
				format!("{} ({} {})", "Family Crest", variations, variation_word)
			}
			Nameplates::SprinterCamo => {
				format!("{} ({} {})", "Sprinter Camo", variations, variation_word)
			}
			Nameplates::Ukiyoe => format!("{} ({} {})", "Ukiyo-e", variations, variation_word),
			Nameplates::Cerberus => format!("{} ({} {})", "Cerberus", variations, variation_word),
			Nameplates::Sun => format!("{} ({} {})", "Sun", variations, variation_word),
			Nameplates::Moon => format!("{} ({} {})", "Moon", variations, variation_word),
			Nameplates::Galaxy => format!("{} ({} {})", "Galaxy", variations, variation_word),
			Nameplates::HongKong => format!("{} ({} {})", "Hong Kong", variations, variation_word),
			Nameplates::Philippines => {
				format!("{} ({} {})", "Philippines", variations, variation_word)
			}
			Nameplates::Thailand => format!("{} ({} {})", "Thailand", variations, variation_word),
			Nameplates::WhiteTiger => {
				format!("{} ({} {})", "White Tiger", variations, variation_word)
			}
			Nameplates::GoldTiger => {
				format!("{} ({} {})", "Gold Tiger", variations, variation_word)
			}
			Nameplates::WhiteDragon => {
				format!("{} ({} {})", "White Dragon", variations, variation_word)
			}
			Nameplates::GoldDragon => {
				format!("{} ({} {})", "Gold Dragon", variations, variation_word)
			}
			Nameplates::DragonandTiger => {
				format!("{} ({} {})", "Dragon and Tiger", variations, variation_word)
			}
			Nameplates::CustomColor1EX => format!(
				"{} ({} {})",
				"Custom Color 1 EX", variations, variation_word
			),
			Nameplates::ParticleEX => {
				format!("{} ({} {})", "Particle EX", variations, variation_word)
			}
			Nameplates::JapanesePatternEX => format!(
				"{} ({} {})",
				"Japanese Pattern EX", variations, variation_word
			),
			Nameplates::CamoEX => format!("{} ({} {})", "Camo EX", variations, variation_word),
			Nameplates::Jurassic2 => {
				format!("{} ({} {})", "Jurassic 2", variations, variation_word)
			}
			Nameplates::Beetle => format!("{} ({} {})", "Beetle", variations, variation_word),
			Nameplates::SteelEX => format!("{} ({} {})", "Steel EX", variations, variation_word),
			Nameplates::Animal1EX => {
				format!("{} ({} {})", "Animal 1 EX", variations, variation_word)
			}
			Nameplates::Dangerous1EX => {
				format!("{} ({} {})", "Dangerous 1 EX", variations, variation_word)
			}
			Nameplates::Graffiti2EX => {
				format!("{} ({} {})", "Graffiti 2 EX", variations, variation_word)
			}
			Nameplates::Kabuki => format!("{} ({} {})", "Kabuki", variations, variation_word),
			Nameplates::PrayingMantis => {
				format!("{} ({} {})", "Praying Mantis", variations, variation_word)
			}
			Nameplates::CarbonEX => format!("{} ({} {})", "Carbon EX", variations, variation_word),
			Nameplates::PaintSplash2EX => format!(
				"{} ({} {})",
				"Paint Splash 2 EX", variations, variation_word
			),
			Nameplates::Flame2EX => format!("{} ({} {})", "Flame 2 EX", variations, variation_word),
			Nameplates::HexagonEX => {
				format!("{} ({} {})", "Hexagon EX", variations, variation_word)
			}
			Nameplates::Chainsaw => format!("{} ({} {})", "Chainsaw", variations, variation_word),
			Nameplates::Spider => format!("{} ({} {})", "Spider", variations, variation_word),
			Nameplates::King => format!("{} ({} {})", "King", variations, variation_word),
			Nameplates::King2 => format!("{} ({} {})", "King 2", variations, variation_word),
			Nameplates::Joker => format!("{} ({} {})", "Joker", variations, variation_word),
			Nameplates::Joker2 => format!("{} ({} {})", "Joker 2", variations, variation_word),
			Nameplates::Witch => format!("{} ({} {})", "Witch", variations, variation_word),
			Nameplates::Witch2 => format!("{} ({} {})", "Witch 2", variations, variation_word),
			Nameplates::Knight => format!("{} ({} {})", "Knight", variations, variation_word),
			Nameplates::Knight2 => format!("{} ({} {})", "Knight 2", variations, variation_word),
			Nameplates::Werewolf => format!("{} ({} {})", "Werewolf", variations, variation_word),
			Nameplates::Werewolf2 => {
				format!("{} ({} {})", "Werewolf 2", variations, variation_word)
			}
			Nameplates::Vampire => format!("{} ({} {})", "Vampire", variations, variation_word),
			Nameplates::Vampire2 => format!("{} ({} {})", "Vampire 2", variations, variation_word),
		}
	}
}

impl GetCategory for Nameplates {
	fn category() -> ItemCategory {
		ItemCategory::CatNamePlate
	}
}

pub const VS_GRADES: &[&str] = &[
	"Hawk", "Snake", "PitBull", "Panther", "Bull", "Gorilla", "Wolf", "Mammoth", "Panda", "Lion",
	"Nue", "Orchi", "Phoenix", "Dragon", "Ogre",
];

#[allow(non_camel_case_types)]
#[derive(FromPrimitive, ToPrimitive, EnumIter)]
pub enum Cars {
	ZR1 = 0,
	ZR1T = 1,
	CAMARO = 2,
	CAMARO_MAT = 3,
	C3 = 4,
	NCEC = 5,
	FD3S = 6,
	FC3S = 7,
	SE3P = 8,
	JCESE = 9,
	GG3P = 10,
	GG3PS = 11,
	SA22 = 12,
	L10B = 13,
	CZ4A = 14,
	CT9A9_MR = 15,
	CT9A8_GSR = 16,
	CT9A8_RS = 17,
	CP9A6_RS = 18,
	CP9A6_GSR = 19,
	CP9A5_GSR = 20,
	CP9A5_RS = 21,
	CE9A_GSR = 22,
	CE9A_RS = 23,
	Z16A = 24,
	A187A = 25,
	V55W = 26,
	BNR35 = 27,
	BNR35V = 28,
	BNR34 = 29,
	BNR34_NUR = 30,
	BCNR33 = 31,
	BNR32 = 32,
	KPGC10 = 33,
	Z34 = 34,
	Z33 = 35,
	Z32 = 36,
	Z31 = 37,
	Z31ANIV = 38,
	S30 = 39,
	S15 = 40,
	RPS13 = 41,
	CV36 = 42,
	Y51 = 43,
	R964 = 44,
	R997 = 45,
	RKC = 46,
	GRB = 47,
	GDBF = 48,
	GDB = 49,
	GDB_C = 50,
	GC8_RA = 51,
	GC8 = 52,
	BL5 = 53,
	CXD = 54,
	RC2 = 55,
	BM9 = 56,
	JZA80 = 57,
	JZA70 = 58,
	SW20 = 59,
	JZX100 = 60,
	UCF10 = 61,
	UCF10_V1 = 62,
	UCF10_V2 = 63,
	UCF10_V3 = 64,
	UCF10_V4 = 65,
	UCF10T = 66,
	UCF10T_V1 = 67,
	UCF10T_V2 = 68,
	UCF10T_V3 = 69,
	UCF10T_V4 = 70,
	JZS161 = 71,
	JZS161T = 72,
	NZE121 = 73,
	KZH100G = 74,
	KZH100GH = 75,
	GRS204 = 76,
	AE86 = 77,
	MA61 = 78,
	MF10 = 79,
	MF10_MAT = 80,
	E89 = 81,
	E92 = 82,
	Z28 = 83,
	C2 = 84,
	NA6CE = 85,
	S124A = 86,
	W124 = 87,
	R172 = 88,
	E39A = 89,
	Y33 = 90,
	R30 = 91,
	WC34 = 92,
	R991 = 93,
	GVB = 94,
	ZC6 = 95,
	JZZ30 = 96,
	ZN6 = 97,
	KDH201V = 98,
	MXG = 99,
	E89P = 100,
	E92_MAT = 101,
	CAMAROT = 102,
	R172P = 103,
	KDH201VH = 104,
	E26 = 105,
	E46 = 106,
	C197 = 107,
	W201 = 108,
	R8 = 109,
	RS4 = 110,
	SRT10 = 111,
	SRT8 = 112,
	VMG = 113,
	M6 = 114,
	E20 = 115,
	ND5MS = 116,
	C35 = 117,
	BNR35N = 118,
	Z34N = 119,
	RCT = 120,
	MARK2 = 121,
	R60 = 122,
	LP700 = 123,
	LP400 = 124,
	P400S = 125,
	DIABLO = 126,
	NC1 = 127,
	NA1 = 128,
	NA2 = 129,
	JW5 = 130,
	AP2 = 131,
	BNR35MC = 132,
	PS13 = 133,
	NC1_AC = 134,
	NA1_AC = 135,
	P991TS = 142,
	P930TS = 140,
	P964T36 = 141,
	P718CS = 144,
	P928GT = 143,
	UF31 = 138,
	GS130 = 139,
	NDERC = 137,
	A90 = 145,
	C110 = 146,
	S14 = 147,
	BNR35I = 148,
	M4 = 149,
}

impl std::fmt::Display for Cars {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		match self {
			Cars::ZR1 => f.write_str("CHEVROLET CORVETTE ZR1"),
			Cars::ZR1T => f.write_str("CHEVROLET CORVETTE ZR1"),
			Cars::CAMARO => f.write_str("CHEVROLET CAMARO SS RS"),
			Cars::CAMARO_MAT => f.write_str("CHEVROLET CAMARO SS RS"),
			Cars::C3 => f.write_str("CHEVROLET CORVETTE Stingray"),
			Cars::NCEC => f.write_str("MAZDA MX-5 RS RHT [NCEC]"),
			Cars::FD3S => f.write_str("MAZDA RX-7 Type R [FD3S]"),
			Cars::FC3S => f.write_str("MAZDA RX-7 GT-X [FC3S]"),
			Cars::SE3P => f.write_str("MAZDA RX-8 Type S [SE3P]"),
			Cars::JCESE => f.write_str("MAZDA EUNOS COSMO TYPE-S [JCESE]"),
			Cars::GG3P => f.write_str("MAZDA MAZDA6 MPS [GG3P]"),
			Cars::GG3PS => f.write_str("MAZDA MAZDA6 MPS [GG3P]"),
			Cars::SA22 => f.write_str("MAZDA RX-7 TURBO SE-Limited [SA22C]"),
			Cars::L10B => f.write_str("MAZDA 110S [L10B]"),
			Cars::CZ4A => f.write_str("MITSUBISHI LANCER Evolution X GSR [CZ4A]"),
			Cars::CT9A9_MR => f.write_str("MITSUBISHI LANCER Evolution IX MR GSR [CT9A]"),
			Cars::CT9A8_GSR => f.write_str("MITSUBISHI LANCER Evolution VIII MR GSR [CT9A]"),
			Cars::CT9A8_RS => f.write_str("MITSUBISHI LANCER Evolution VIII MR RS [CT9A]"),
			Cars::CP9A6_RS => f.write_str("MITSUBISHI LANCER Evolution VI RS [CP9A]"),
			Cars::CP9A6_GSR => f.write_str("MITSUBISHI LANCER Evolution VI GSR [CP9A]"),
			Cars::CP9A5_GSR => f.write_str("MITSUBISHI LANCER Evolution V GSR [CP9A]"),
			Cars::CP9A5_RS => f.write_str("MITSUBISHI LANCER Evolution V RS [CP9A]"),
			Cars::CE9A_GSR => f.write_str("MITSUBISHI LANCER Evolution III GSR [CE9A]"),
			Cars::CE9A_RS => f.write_str("MITSUBISHI LANCER Evolution III RS [CE9A]"),
			Cars::Z16A => f.write_str("MITSUBISHI GTO TWIN TURBO [Z16A]"),
			Cars::A187A => f.write_str("MITSUBISHI STARION GSR-VR [A187A]"),
			Cars::V55W => f.write_str("MITSUBISHI PAJERO EVOLUTION"),
			Cars::BNR35 => f.write_str("NISSAN GT-R [R35]"),
			Cars::BNR35V => f.write_str("NISSAN GT-R SpecV [R35]"),
			Cars::BNR34 => f.write_str("NISSAN SKYLINE GT-R VspecII [BNR34]"),
			Cars::BNR34_NUR => f.write_str("NISSAN SKYLINE GT-R VspecII nur [BNR34]"),
			Cars::BCNR33 => f.write_str("NISSAN SKYLINE GT-R Vspec [BCNR33]"),
			Cars::BNR32 => f.write_str("NISSAN SKYLINE GT-R [BNR32]"),
			Cars::KPGC10 => f.write_str("NISSAN SKYLINE GT-R [KPGC10]"),
			Cars::Z34 => f.write_str("NISSAN FAIRLADY Z Version ST [Z34]"),
			Cars::Z33 => f.write_str("NISSAN FAIRLADY Z VersionS [Z33]"),
			Cars::Z32 => f.write_str("NISSAN FAIRLADY Z 300ZX [Z32]"),
			Cars::Z31 => f.write_str("NISSAN FAIRLADY Z 300ZX [Z31]"),
			Cars::Z31ANIV => f.write_str("NISSAN FAIRLADY Z 300ZX [Z31]"),
			Cars::S30 => f.write_str("NISSAN FAIRLADY Z [S30]"),
			Cars::S15 => f.write_str("NISSAN SILVIA specR [S15]"),
			Cars::RPS13 => f.write_str("NISSAN 180SX TYPE-III [RPS13]"),
			Cars::CV36 => f.write_str("NISSAN SKYLINE COUPE 370GT Type S [CKV36]"),
			Cars::Y51 => f.write_str("NISSAN FUGA 370GT Type S [KY51]"),
			Cars::R964 => f.write_str("RUF CTR"),
			Cars::R997 => f.write_str("RUF RGT"),
			Cars::RKC => f.write_str("RUF RK coupe"),
			Cars::GRB => f.write_str("SUBARU IMPREZA WRX STI [GRB]"),
			Cars::GDBF => f.write_str("SUBARU IMPREZA WRX STI [GDB-F]"),
			Cars::GDB => f.write_str("SUBARU IMPREZA WRX STi [GDB-C]"),
			Cars::GDB_C => f.write_str("SUBARU IMPREZA WRX STi specC Limited [GDB-C]"),
			Cars::GC8_RA => f.write_str("SUBARU IMPREZA WRX typeRA STi VersionVI [GC8]"),
			Cars::GC8 => f.write_str("SUBARU IMPREZA WRX STi VersionVI [GC8]"),
			Cars::BL5 => f.write_str("SUBARU LEGACY B4 2.0GT spec.B [BL5]"),
			Cars::CXD => f.write_str("SUBARU ALCYONE SVX Version L [CXD]"),
			Cars::RC2 => f.write_str("SUBARU R2"),
			Cars::BM9 => f.write_str("SUBARU LEGACY B4 2.5GT S Package [BM9]"),
			Cars::JZA80 => f.write_str("TOYOTA SUPRA RZ [JZA80]"),
			Cars::JZA70 => f.write_str("TOYOTA SUPRA 2.5GT TWIN TURBO R [JZA70]"),
			Cars::SW20 => f.write_str("TOYOTA MR2 GT-S [SW20]"),
			Cars::JZX100 => f.write_str("TOYOTA CHASER Tourer V [JZX100]"),
			Cars::UCF10 => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::UCF10_V1 => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::UCF10_V2 => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::UCF10_V3 => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::UCF10_V4 => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::UCF10T => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::UCF10T_V1 => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::UCF10T_V2 => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::UCF10T_V3 => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::UCF10T_V4 => f.write_str("TOYOTA CELSIOR [UCF10]"),
			Cars::JZS161 => f.write_str("TOYOTA ARISTO V300 VERTEX EDITION [JZS161]"),
			Cars::JZS161T => f.write_str("TOYOTA ARISTO V300 VERTEX EDITION [JZS161]"),
			Cars::NZE121 => f.write_str("TOYOTA COROLLA"),
			Cars::KZH100G => f.write_str("TOYOTA HIACE WAGON"),
			Cars::KZH100GH => f.write_str("TOYOTA HIACE WAGON"),
			Cars::GRS204 => f.write_str("TOYOTA CROWN ATHLETE [GRS204]"),
			Cars::AE86 => f.write_str("TOYOTA SPRINTER TRUENO GT APEX [AE86]"),
			Cars::MA61 => f.write_str("TOYOTA CELICA SUPRA [MA61L]"),
			Cars::MF10 => f.write_str("TOYOTA 2000GT [MF10]"),
			Cars::MF10_MAT => f.write_str("TOYOTA 2000GT [MF10]"),
			Cars::E89 => f.write_str("BMW Z4 sDrive35is [E89]"),
			Cars::E92 => f.write_str("BMW M3 coupe [E92]"),
			Cars::Z28 => f.write_str("CHEVROLET CAMARO Z28"),
			Cars::C2 => f.write_str("CHEVROLET CORVETTE Sting Ray"),
			Cars::NA6CE => f.write_str("MAZDA MX-5 [NA6CE]"),
			Cars::S124A => f.write_str("MAZDA RX-3 [S124A]"),
			Cars::W124 => f.write_str("Mercedes-Benz 500E"),
			Cars::R172 => f.write_str("Mercedes-Benz SLK 350 BlueEFFICIENCY"),
			Cars::E39A => f.write_str("MITSUBISHI GALANT VR-4 [E39A]"),
			Cars::Y33 => f.write_str("NISSAN GLORIA Gran Turismo ULTIMA [Y33]"),
			Cars::R30 => f.write_str("NISSAN SKYLINE Hardtop 2000 TURBO INTERCOOLER RS-X [R30]"),
			Cars::WC34 => f.write_str("NISSAN STAGEA Autech Version 260RS [WGNC34]"),
			Cars::R991 => f.write_str("RUF Rt35"),
			Cars::GVB => f.write_str("SUBARU WRX STI [GVB]"),
			Cars::ZC6 => f.write_str("SUBARU SUBARU BRZ S [ZC6]"),
			Cars::JZZ30 => f.write_str("TOYOTA SOARER 2.5GT TWIN TURBO [JZZ30]"),
			Cars::ZN6 => f.write_str("TOYOTA TOYOTA 86 GT [ZN6]"),
			Cars::KDH201V => f.write_str("TOYOTA HIACE VAN"),
			Cars::MXG => f.write_str(" "),
			Cars::E89P => f.write_str("BMW Z4 sDrive35is [E89]"),
			Cars::E92_MAT => f.write_str("BMW M3 coupe [E92]"),
			Cars::CAMAROT => f.write_str("CHEVROLET CAMARO SS RS"),
			Cars::R172P => f.write_str("Mercedes-Benz SLK 350 BlueEFFICIENCY"),
			Cars::KDH201VH => f.write_str("TOYOTA HIACE VAN"),
			Cars::E26 => f.write_str("BMW M1 [E26]"),
			Cars::E46 => f.write_str("BMW M3 CSL [E46]"),
			Cars::C197 => f.write_str("Mercedes-Benz SLS AMG GT"),
			Cars::W201 => f.write_str("Mercedes-Benz 190E 2.5-16 Evolution II"),
			Cars::R8 => f.write_str("Audi R8 Coupe 5.2 FSI quattro"),
			Cars::RS4 => f.write_str("Audi RS 4 Avant [B8]"),
			Cars::SRT10 => f.write_str("Dodge Viper SRT-10"),
			Cars::SRT8 => f.write_str("Dodge Charger SRT8"),
			Cars::VMG => f.write_str("SUBARU LEVORG 2.0GT-S [VMG]"),
			Cars::M6 => f.write_str("BMW M6 Gran Coupe [6C44M]"),
			Cars::E20 => f.write_str("BMW 2002 Turbo [E20]"),
			Cars::ND5MS => f.write_str("MAZDA MX-5 [ND5RC]"),
			Cars::C35 => f.write_str("NISSAN LAUREL 25 CLUB-S TURBO Type X [GC35]"),
			Cars::BNR35N => f.write_str("NISSAN GT-R NISMO [R35]"),
			Cars::Z34N => f.write_str("NISSAN FAIRLADY Z NISMO [Z34]"),
			Cars::RCT => f.write_str("RUF RCT"),
			Cars::MARK2 => f.write_str("TOYOTA MARKII TOURER V [JZX100]"),
			Cars::R60 => f.write_str("BMW MINI COOPER S ALL4 COUNTRYMAN [ZC16A]"),
			Cars::LP700 => f.write_str("Lamborghini Aventador LP700-4"),
			Cars::LP400 => f.write_str("Lamborghini Countach LP400"),
			Cars::P400S => f.write_str("Lamborghini Miura P400S"),
			Cars::DIABLO => f.write_str("Lamborghini Diablo VT"),
			Cars::NC1 => f.write_str("HONDA NSX [NC1]"),
			Cars::NA1 => f.write_str("HONDA NSX [NA1]"),
			Cars::NA2 => f.write_str("HONDA NSX-R [NA2]"),
			Cars::JW5 => f.write_str("HONDA S660 α [JW5]"),
			Cars::AP2 => f.write_str("HONDA S2000 Type S [AP2]"),
			Cars::BNR35MC => f.write_str("NISSAN GT-R Pure edition [R35]"),
			Cars::PS13 => f.write_str("NISSAN SILVIA K's [PS13]"),
			Cars::NC1_AC => f.write_str("ACURA NSX [NC1]"),
			Cars::NA1_AC => f.write_str("ACURA NSX [NA1]"),
			Cars::P991TS => f.write_str("PORSCHE 911(991) Turbo S [991MA171]"),
			Cars::P930TS => f.write_str("PORSCHE 911(930) Turbo S"),
			Cars::P964T36 => f.write_str("PORSCHE 911(964) Turbo 3.6"),
			Cars::P718CS => f.write_str("PORSCHE 718 Cayman S [982H2]"),
			Cars::P928GT => f.write_str("PORSCHE 928 GT"),
			Cars::UF31 => f.write_str("NISSAN LEOPARD Ultima [UF31]"),
			Cars::GS130 => f.write_str("NISSAN FAIRLADY Z [S130]"),
			Cars::NDERC => f.write_str("MAZDA MX-5 RF RS [NDERC]"),
			Cars::A90 => f.write_str("TOYOTA GR SUPRA RZ [DB42]"),
			Cars::C110 => f.write_str("NISSAN SKYLINE 2000 GT-R [KPGC110]"),
			Cars::S14 => f.write_str("NISSAN SILVIA K's AERO [S14]"),
			Cars::BNR35I => f.write_str("NISSAN GT-R50 by Italdesign [IDG-R35]"),
			Cars::M4 => f.write_str("BMW M4 Coupe Competition [G82]"),
		}
	}
}

impl Cars {
	pub fn have_dress_up(&self) -> bool {
		match self {
			Cars::ZR1 => true,
			Cars::ZR1T => true,
			Cars::CAMARO => true,
			Cars::CAMARO_MAT => true,
			Cars::C3 => true,
			Cars::NCEC => true,
			Cars::FD3S => true,
			Cars::FC3S => true,
			Cars::SE3P => true,
			Cars::JCESE => true,
			Cars::GG3P => true,
			Cars::GG3PS => true,
			Cars::SA22 => true,
			Cars::L10B => true,
			Cars::CZ4A => true,
			Cars::CT9A9_MR => true,
			Cars::CT9A8_GSR => true,
			Cars::CT9A8_RS => true,
			Cars::CP9A6_RS => true,
			Cars::CP9A6_GSR => true,
			Cars::CP9A5_GSR => true,
			Cars::CP9A5_RS => true,
			Cars::CE9A_GSR => true,
			Cars::CE9A_RS => true,
			Cars::Z16A => true,
			Cars::A187A => true,
			Cars::V55W => true,
			Cars::BNR35 => false,
			Cars::BNR35V => false,
			Cars::BNR34 => true,
			Cars::BNR34_NUR => true,
			Cars::BCNR33 => true,
			Cars::BNR32 => true,
			Cars::KPGC10 => true,
			Cars::Z34 => true,
			Cars::Z33 => true,
			Cars::Z32 => true,
			Cars::Z31 => true,
			Cars::Z31ANIV => true,
			Cars::S30 => true,
			Cars::S15 => true,
			Cars::RPS13 => true,
			Cars::CV36 => true,
			Cars::Y51 => true,
			Cars::R964 => true,
			Cars::R997 => true,
			Cars::RKC => true,
			Cars::GRB => true,
			Cars::GDBF => true,
			Cars::GDB => true,
			Cars::GDB_C => true,
			Cars::GC8_RA => true,
			Cars::GC8 => true,
			Cars::BL5 => true,
			Cars::CXD => true,
			Cars::RC2 => true,
			Cars::BM9 => true,
			Cars::JZA80 => true,
			Cars::JZA70 => true,
			Cars::SW20 => true,
			Cars::JZX100 => true,
			Cars::UCF10 => true,
			Cars::UCF10_V1 => true,
			Cars::UCF10_V2 => true,
			Cars::UCF10_V3 => true,
			Cars::UCF10_V4 => true,
			Cars::UCF10T => true,
			Cars::UCF10T_V1 => true,
			Cars::UCF10T_V2 => true,
			Cars::UCF10T_V3 => true,
			Cars::UCF10T_V4 => true,
			Cars::JZS161 => true,
			Cars::JZS161T => true,
			Cars::NZE121 => true,
			Cars::KZH100G => true,
			Cars::KZH100GH => true,
			Cars::GRS204 => true,
			Cars::AE86 => true,
			Cars::MA61 => true,
			Cars::MF10 => true,
			Cars::MF10_MAT => true,
			Cars::E89 => true,
			Cars::E92 => true,
			Cars::Z28 => true,
			Cars::C2 => true,
			Cars::NA6CE => true,
			Cars::S124A => true,
			Cars::W124 => true,
			Cars::R172 => true,
			Cars::E39A => true,
			Cars::Y33 => true,
			Cars::R30 => true,
			Cars::WC34 => true,
			Cars::R991 => true,
			Cars::GVB => true,
			Cars::ZC6 => true,
			Cars::JZZ30 => true,
			Cars::ZN6 => true,
			Cars::KDH201V => true,
			Cars::MXG => false,
			Cars::E89P => true,
			Cars::E92_MAT => true,
			Cars::CAMAROT => true,
			Cars::R172P => true,
			Cars::KDH201VH => true,
			Cars::E26 => true,
			Cars::E46 => true,
			Cars::C197 => true,
			Cars::W201 => true,
			Cars::R8 => true,
			Cars::RS4 => true,
			Cars::SRT10 => true,
			Cars::SRT8 => true,
			Cars::VMG => true,
			Cars::M6 => true,
			Cars::E20 => true,
			Cars::ND5MS => false,
			Cars::C35 => true,
			Cars::BNR35N => false,
			Cars::Z34N => false,
			Cars::RCT => false,
			Cars::MARK2 => true,
			Cars::R60 => false,
			Cars::LP700 => true,
			Cars::LP400 => true,
			Cars::P400S => false,
			Cars::DIABLO => false,
			Cars::NC1 => false,
			Cars::NA1 => false,
			Cars::NA2 => false,
			Cars::JW5 => false,
			Cars::AP2 => false,
			Cars::BNR35MC => false,
			Cars::PS13 => false,
			Cars::NC1_AC => false,
			Cars::NA1_AC => false,
			Cars::P991TS => true,
			Cars::P930TS => true,
			Cars::P964T36 => true,
			Cars::P718CS => true,
			Cars::P928GT => false,
			Cars::UF31 => true,
			Cars::GS130 => false,
			Cars::NDERC => false,
			Cars::A90 => false,
			Cars::C110 => true,
			Cars::S14 => true,
			Cars::BNR35I => true,
			Cars::M4 => true,
		}
	}

	pub fn limited_dress_up(&self) -> bool {
		match self {
			Cars::ZR1 => false,
			Cars::ZR1T => false,
			Cars::CAMARO => false,
			Cars::CAMARO_MAT => false,
			Cars::C3 => false,
			Cars::NCEC => false,
			Cars::FD3S => false,
			Cars::FC3S => false,
			Cars::SE3P => false,
			Cars::JCESE => false,
			Cars::GG3P => false,
			Cars::GG3PS => false,
			Cars::SA22 => false,
			Cars::L10B => false,
			Cars::CZ4A => false,
			Cars::CT9A9_MR => false,
			Cars::CT9A8_GSR => false,
			Cars::CT9A8_RS => false,
			Cars::CP9A6_RS => false,
			Cars::CP9A6_GSR => false,
			Cars::CP9A5_GSR => false,
			Cars::CP9A5_RS => false,
			Cars::CE9A_GSR => false,
			Cars::CE9A_RS => false,
			Cars::Z16A => false,
			Cars::A187A => false,
			Cars::V55W => false,
			Cars::BNR35 => false,
			Cars::BNR35V => false,
			Cars::BNR34 => false,
			Cars::BNR34_NUR => false,
			Cars::BCNR33 => false,
			Cars::BNR32 => false,
			Cars::KPGC10 => false,
			Cars::Z34 => false,
			Cars::Z33 => false,
			Cars::Z32 => false,
			Cars::Z31 => false,
			Cars::Z31ANIV => false,
			Cars::S30 => false,
			Cars::S15 => false,
			Cars::RPS13 => false,
			Cars::CV36 => false,
			Cars::Y51 => false,
			Cars::R964 => false,
			Cars::R997 => false,
			Cars::RKC => false,
			Cars::GRB => false,
			Cars::GDBF => false,
			Cars::GDB => false,
			Cars::GDB_C => false,
			Cars::GC8_RA => false,
			Cars::GC8 => false,
			Cars::BL5 => false,
			Cars::CXD => false,
			Cars::RC2 => false,
			Cars::BM9 => false,
			Cars::JZA80 => false,
			Cars::JZA70 => false,
			Cars::SW20 => false,
			Cars::JZX100 => false,
			Cars::UCF10 => false,
			Cars::UCF10_V1 => false,
			Cars::UCF10_V2 => false,
			Cars::UCF10_V3 => false,
			Cars::UCF10_V4 => false,
			Cars::UCF10T => false,
			Cars::UCF10T_V1 => false,
			Cars::UCF10T_V2 => false,
			Cars::UCF10T_V3 => false,
			Cars::UCF10T_V4 => false,
			Cars::JZS161 => false,
			Cars::JZS161T => false,
			Cars::NZE121 => false,
			Cars::KZH100G => false,
			Cars::KZH100GH => false,
			Cars::GRS204 => false,
			Cars::AE86 => false,
			Cars::MA61 => false,
			Cars::MF10 => false,
			Cars::MF10_MAT => false,
			Cars::E89 => false,
			Cars::E92 => false,
			Cars::Z28 => false,
			Cars::C2 => false,
			Cars::NA6CE => false,
			Cars::S124A => false,
			Cars::W124 => false,
			Cars::R172 => false,
			Cars::E39A => false,
			Cars::Y33 => false,
			Cars::R30 => false,
			Cars::WC34 => false,
			Cars::R991 => false,
			Cars::GVB => false,
			Cars::ZC6 => false,
			Cars::JZZ30 => false,
			Cars::ZN6 => false,
			Cars::KDH201V => false,
			Cars::MXG => false,
			Cars::E89P => false,
			Cars::E92_MAT => false,
			Cars::CAMAROT => false,
			Cars::R172P => false,
			Cars::KDH201VH => false,
			Cars::E26 => false,
			Cars::E46 => false,
			Cars::C197 => false,
			Cars::W201 => false,
			Cars::R8 => false,
			Cars::RS4 => false,
			Cars::SRT10 => false,
			Cars::SRT8 => false,
			Cars::VMG => false,
			Cars::M6 => true,
			Cars::E20 => true,
			Cars::ND5MS => false,
			Cars::C35 => false,
			Cars::BNR35N => false,
			Cars::Z34N => false,
			Cars::RCT => false,
			Cars::MARK2 => false,
			Cars::R60 => false,
			Cars::LP700 => true,
			Cars::LP400 => true,
			Cars::P400S => true,
			Cars::DIABLO => true,
			Cars::NC1 => false,
			Cars::NA1 => false,
			Cars::NA2 => false,
			Cars::JW5 => false,
			Cars::AP2 => false,
			Cars::BNR35MC => false,
			Cars::PS13 => false,
			Cars::NC1_AC => false,
			Cars::NA1_AC => false,
			Cars::P991TS => false,
			Cars::P930TS => false,
			Cars::P964T36 => false,
			Cars::P718CS => false,
			Cars::P928GT => false,
			Cars::UF31 => false,
			Cars::GS130 => false,
			Cars::NDERC => false,
			Cars::A90 => false,
			Cars::C110 => false,
			Cars::S14 => false,
			Cars::BNR35I => false,
			Cars::M4 => false,
		}
	}

	pub fn aero_category(&self) -> ItemCategory {
		match self {
			Cars::ZR1 => ItemCategory::CatAeroFullset,
			Cars::ZR1T => ItemCategory::CatAeroFullset,
			Cars::CAMARO => ItemCategory::CatAeroFullset,
			Cars::CAMARO_MAT => ItemCategory::CatAeroFullset,
			Cars::C3 => ItemCategory::CatAeroFullset,
			Cars::NCEC => ItemCategory::CatAeroFullset,
			Cars::FD3S => ItemCategory::CatAeroFullset,
			Cars::FC3S => ItemCategory::CatAeroFullset,
			Cars::SE3P => ItemCategory::CatAeroFullset,
			Cars::JCESE => ItemCategory::CatAeroFullset,
			Cars::GG3P => ItemCategory::CatAeroFullset,
			Cars::GG3PS => ItemCategory::CatAeroFullset,
			Cars::SA22 => ItemCategory::CatAeroFullset,
			Cars::L10B => ItemCategory::CatAeroFullset,
			Cars::CZ4A => ItemCategory::CatAeroFullset,
			Cars::CT9A9_MR => ItemCategory::CatAeroFullset,
			Cars::CT9A8_GSR => ItemCategory::CatAeroFullset,
			Cars::CT9A8_RS => ItemCategory::CatAeroFullset,
			Cars::CP9A6_RS => ItemCategory::CatAeroFullset,
			Cars::CP9A6_GSR => ItemCategory::CatAeroFullset,
			Cars::CP9A5_GSR => ItemCategory::CatAeroFullset,
			Cars::CP9A5_RS => ItemCategory::CatAeroFullset,
			Cars::CE9A_GSR => ItemCategory::CatAeroFullset,
			Cars::CE9A_RS => ItemCategory::CatAeroFullset,
			Cars::Z16A => ItemCategory::CatAeroFullset,
			Cars::A187A => ItemCategory::CatAeroFullset,
			Cars::V55W => ItemCategory::CatAeroFullset,
			Cars::BNR35 => ItemCategory::CatAero,
			Cars::BNR35V => ItemCategory::CatAero,
			Cars::BNR34 => ItemCategory::CatAeroFullset,
			Cars::BNR34_NUR => ItemCategory::CatAeroFullset,
			Cars::BCNR33 => ItemCategory::CatAeroFullset,
			Cars::BNR32 => ItemCategory::CatAeroFullset,
			Cars::KPGC10 => ItemCategory::CatAeroFullset,
			Cars::Z34 => ItemCategory::CatAeroFullset,
			Cars::Z33 => ItemCategory::CatAeroFullset,
			Cars::Z32 => ItemCategory::CatAeroFullset,
			Cars::Z31 => ItemCategory::CatAeroFullset,
			Cars::Z31ANIV => ItemCategory::CatAeroFullset,
			Cars::S30 => ItemCategory::CatAeroFullset,
			Cars::S15 => ItemCategory::CatAeroFullset,
			Cars::RPS13 => ItemCategory::CatAeroFullset,
			Cars::CV36 => ItemCategory::CatAeroFullset,
			Cars::Y51 => ItemCategory::CatAeroFullset,
			Cars::R964 => ItemCategory::CatAero,
			Cars::R997 => ItemCategory::CatAero,
			Cars::RKC => ItemCategory::CatAero,
			Cars::GRB => ItemCategory::CatAeroFullset,
			Cars::GDBF => ItemCategory::CatAeroFullset,
			Cars::GDB => ItemCategory::CatAeroFullset,
			Cars::GDB_C => ItemCategory::CatAeroFullset,
			Cars::GC8_RA => ItemCategory::CatAeroFullset,
			Cars::GC8 => ItemCategory::CatAeroFullset,
			Cars::BL5 => ItemCategory::CatAeroFullset,
			Cars::CXD => ItemCategory::CatAeroFullset,
			Cars::RC2 => ItemCategory::CatAeroFullset,
			Cars::BM9 => ItemCategory::CatAeroFullset,
			Cars::JZA80 => ItemCategory::CatAeroFullset,
			Cars::JZA70 => ItemCategory::CatAeroFullset,
			Cars::SW20 => ItemCategory::CatAeroFullset,
			Cars::JZX100 => ItemCategory::CatAeroFullset,
			Cars::UCF10 => ItemCategory::CatAeroFullset,
			Cars::UCF10_V1 => ItemCategory::CatAeroFullset,
			Cars::UCF10_V2 => ItemCategory::CatAeroFullset,
			Cars::UCF10_V3 => ItemCategory::CatAeroFullset,
			Cars::UCF10_V4 => ItemCategory::CatAeroFullset,
			Cars::UCF10T => ItemCategory::CatAeroFullset,
			Cars::UCF10T_V1 => ItemCategory::CatAeroFullset,
			Cars::UCF10T_V2 => ItemCategory::CatAeroFullset,
			Cars::UCF10T_V3 => ItemCategory::CatAeroFullset,
			Cars::UCF10T_V4 => ItemCategory::CatAeroFullset,
			Cars::JZS161 => ItemCategory::CatAeroFullset,
			Cars::JZS161T => ItemCategory::CatAeroFullset,
			Cars::NZE121 => ItemCategory::CatAeroFullset,
			Cars::KZH100G => ItemCategory::CatAeroFullset,
			Cars::KZH100GH => ItemCategory::CatAeroFullset,
			Cars::GRS204 => ItemCategory::CatAeroFullset,
			Cars::AE86 => ItemCategory::CatAeroFullset,
			Cars::MA61 => ItemCategory::CatAeroFullset,
			Cars::MF10 => ItemCategory::CatAeroFullset,
			Cars::MF10_MAT => ItemCategory::CatAeroFullset,
			Cars::E89 => ItemCategory::CatAeroFullset,
			Cars::E92 => ItemCategory::CatAeroFullset,
			Cars::Z28 => ItemCategory::CatAeroFullset,
			Cars::C2 => ItemCategory::CatAeroFullset,
			Cars::NA6CE => ItemCategory::CatAeroFullset,
			Cars::S124A => ItemCategory::CatAeroFullset,
			Cars::W124 => ItemCategory::CatAeroFullset,
			Cars::R172 => ItemCategory::CatAeroFullset,
			Cars::E39A => ItemCategory::CatAeroFullset,
			Cars::Y33 => ItemCategory::CatAeroFullset,
			Cars::R30 => ItemCategory::CatAeroFullset,
			Cars::WC34 => ItemCategory::CatAeroFullset,
			Cars::R991 => ItemCategory::CatAero,
			Cars::GVB => ItemCategory::CatAeroFullset,
			Cars::ZC6 => ItemCategory::CatAeroFullset,
			Cars::JZZ30 => ItemCategory::CatAeroFullset,
			Cars::ZN6 => ItemCategory::CatAeroFullset,
			Cars::KDH201V => ItemCategory::CatAeroFullset,
			Cars::MXG => ItemCategory::CatAero,
			Cars::E89P => ItemCategory::CatAeroFullset,
			Cars::E92_MAT => ItemCategory::CatAeroFullset,
			Cars::CAMAROT => ItemCategory::CatAeroFullset,
			Cars::R172P => ItemCategory::CatAeroFullset,
			Cars::KDH201VH => ItemCategory::CatAeroFullset,
			Cars::E26 => ItemCategory::CatAeroFullset,
			Cars::E46 => ItemCategory::CatAeroFullset,
			Cars::C197 => ItemCategory::CatAeroFullset,
			Cars::W201 => ItemCategory::CatAeroFullset,
			Cars::R8 => ItemCategory::CatAeroFullset,
			Cars::RS4 => ItemCategory::CatAeroFullset,
			Cars::SRT10 => ItemCategory::CatAeroFullset,
			Cars::SRT8 => ItemCategory::CatAeroFullset,
			Cars::VMG => ItemCategory::CatAeroFullset,
			Cars::M6 => ItemCategory::CatAeroFullset,
			Cars::E20 => ItemCategory::CatAeroFullset,
			Cars::ND5MS => ItemCategory::CatAero,
			Cars::C35 => ItemCategory::CatAeroFullset,
			Cars::BNR35N => ItemCategory::CatAero,
			Cars::Z34N => ItemCategory::CatAero,
			Cars::RCT => ItemCategory::CatAero,
			Cars::MARK2 => ItemCategory::CatAeroFullset,
			Cars::R60 => ItemCategory::CatAero,
			Cars::LP700 => ItemCategory::CatAeroFullset,
			Cars::LP400 => ItemCategory::CatAeroFullset,
			Cars::P400S => ItemCategory::CatAero,
			Cars::DIABLO => ItemCategory::CatAero,
			Cars::NC1 => ItemCategory::CatAero,
			Cars::NA1 => ItemCategory::CatAero,
			Cars::NA2 => ItemCategory::CatAero,
			Cars::JW5 => ItemCategory::CatAero,
			Cars::AP2 => ItemCategory::CatAero,
			Cars::BNR35MC => ItemCategory::CatAero,
			Cars::PS13 => ItemCategory::CatAero,
			Cars::NC1_AC => ItemCategory::CatAero,
			Cars::NA1_AC => ItemCategory::CatAero,
			Cars::P991TS => ItemCategory::CatAero,
			Cars::P930TS => ItemCategory::CatAero,
			Cars::P964T36 => ItemCategory::CatAero,
			Cars::P718CS => ItemCategory::CatAero,
			Cars::P928GT => ItemCategory::CatAero,
			Cars::UF31 => ItemCategory::CatAero,
			Cars::GS130 => ItemCategory::CatAero,
			Cars::NDERC => ItemCategory::CatAero,
			Cars::A90 => ItemCategory::CatAero,
			Cars::C110 => ItemCategory::CatAero,
			Cars::S14 => ItemCategory::CatAero,
			Cars::BNR35I => ItemCategory::CatAero,
			Cars::M4 => ItemCategory::CatAeroFullset,
		}
	}

	pub fn can_use_du_item(&self, item: &DressUpItem) -> bool {
		if !self.have_dress_up() {
			false
		} else if item.item_type == 1 && item.category != self.aero_category() {
			false
		} else if self.limited_dress_up() {
			if item.category == ItemCategory::CatNeon || item.category == ItemCategory::CatGtWing {
				false
			} else if item.category == ItemCategory::CatBonnet && item.game_id > 4 {
				false
			} else {
				true
			}
		} else {
			true
		}
	}
}

#[derive(FromPrimitive, ToPrimitive, EnumIter)]
pub enum RivalMarker {
	Fire = 1,
	Animal = 2,
	Neon = 3,
	Metal = 4,
	Dangerous = 5,
	Casual = 6,
	Floral = 7,
	PaintSplash = 8,
	Graffiti = 9,
	JapanesePattern1 = 10,
	Silvercraft = 11,
	Mechanical = 12,
	Space = 13,
	Relief = 14,
	Camo = 15,
	Wood = 16,
	Tropical = 17,
	Thunder = 18,
	Wall = 19,
	Reggae = 20,
	Decorative = 21,
	Tropical2 = 22,
	Monogram = 23,
	Studs = 24,
	Casual2 = 25,
	Graffiti2 = 26,
	Carbon = 27,
	GuitarPick = 28,
	Bat = 29,
	Effect = 30,
	LetterV = 31,
	Wings = 32,
	Heart = 33,
	Diamond = 34,
	Flame = 35,
	Pinstripe = 36,
	ArrowOfLight = 37,
	Hexagon = 38,
	SilverAccessory = 39,
	Beginner = 40,
	Steel = 41,
	JapanesePattern2 = 42,
	Dangerous2 = 43,
	Sticker = 44,
	IDTag = 45,
	Animal2 = 46,
	PaintSplash2 = 47,
	Nautical = 48,
	Onigawara = 49,
	Glitter = 50,
	Comic = 51,
	Forest = 52,
	Bandana = 53,
	Road = 54,
	Camoflage2 = 55,
	Pinstripe2 = 56,
	Graffiti3 = 57,
	Crystal = 58,
	Metropolis = 59,
	SubWoofer = 60,
	Digital = 61,
	Punk = 62,
	Leather = 63,
	Flame2 = 64,
	Camoflage3 = 65,
	Wall2 = 66,
	Dangerous3 = 67,
	Mechanical2 = 68,
	Circuit = 69,
	Butterfly = 70,
	Katana = 71,
	Arrow = 72,
	Shuriken = 73,
	HeavyMetal = 74,
	Beetle = 75,
	Fang = 76,
	Dragon = 77,
	Falcon = 78,
	Punk2 = 79,
	Comic2 = 80,
	Joker = 81,
	Fighter = 82,
	Vampire = 83,
}

impl ToString for RivalMarker {
	fn to_string(&self) -> String {
		match self {
			RivalMarker::Fire => String::from("Fire"),
			RivalMarker::Animal => String::from("Animal"),
			RivalMarker::Neon => String::from("Neon"),
			RivalMarker::Metal => String::from("Metal"),
			RivalMarker::Dangerous => String::from("Dangerous"),
			RivalMarker::Casual => String::from("Casual"),
			RivalMarker::Floral => String::from("Floral"),
			RivalMarker::PaintSplash => String::from("Paint Splash"),
			RivalMarker::Graffiti => String::from("Graffiti"),
			RivalMarker::JapanesePattern1 => String::from("Japanese Pattern 1"),
			RivalMarker::Silvercraft => String::from("Silvercraft"),
			RivalMarker::Mechanical => String::from("Mechanical"),
			RivalMarker::Space => String::from("Space"),
			RivalMarker::Relief => String::from("Relief"),
			RivalMarker::Camo => String::from("Camo"),
			RivalMarker::Wood => String::from("Wood"),
			RivalMarker::Tropical => String::from("Tropical"),
			RivalMarker::Thunder => String::from("Thunder"),
			RivalMarker::Wall => String::from("Wall"),
			RivalMarker::Reggae => String::from("Reggae"),
			RivalMarker::Decorative => String::from("Decorative"),
			RivalMarker::Tropical2 => String::from("Tropical 2"),
			RivalMarker::Monogram => String::from("Monogram"),
			RivalMarker::Studs => String::from("Studs"),
			RivalMarker::Casual2 => String::from("Casual"),
			RivalMarker::Graffiti2 => String::from("Graffiti 2"),
			RivalMarker::Carbon => String::from("Carbon"),
			RivalMarker::GuitarPick => String::from("Guitar Pick"),
			RivalMarker::Bat => String::from("Bat"),
			RivalMarker::Effect => String::from("Effect"),
			RivalMarker::LetterV => String::from("Letter V"),
			RivalMarker::Wings => String::from("Wings"),
			RivalMarker::Heart => String::from("Heart"),
			RivalMarker::Diamond => String::from("Diamond"),
			RivalMarker::Flame => String::from("Flame"),
			RivalMarker::Pinstripe => String::from("Pinstripe"),
			RivalMarker::ArrowOfLight => String::from("Arrow of Light"),
			RivalMarker::Hexagon => String::from("Hexagon"),
			RivalMarker::SilverAccessory => String::from("Silver Accessory"),
			RivalMarker::Beginner => String::from("Beginner"),
			RivalMarker::Steel => String::from("Steel"),
			RivalMarker::JapanesePattern2 => String::from("Japanese Pattern 2"),
			RivalMarker::Dangerous2 => String::from("Dangerous 2"),
			RivalMarker::Sticker => String::from("Sticker"),
			RivalMarker::IDTag => String::from("ID Tag"),
			RivalMarker::Animal2 => String::from("Animal 2"),
			RivalMarker::PaintSplash2 => String::from("Paint Splash 2"),
			RivalMarker::Nautical => String::from("Nautical"),
			RivalMarker::Onigawara => String::from("Onigawara"),
			RivalMarker::Glitter => String::from("Glitter"),
			RivalMarker::Comic => String::from("Comic"),
			RivalMarker::Forest => String::from("Forest"),
			RivalMarker::Bandana => String::from("Bandana"),
			RivalMarker::Road => String::from("Road"),
			RivalMarker::Camoflage2 => String::from("Camoflage 2"),
			RivalMarker::Pinstripe2 => String::from("Pinstripe"),
			RivalMarker::Graffiti3 => String::from("Graffiti 3"),
			RivalMarker::Crystal => String::from("Crystal"),
			RivalMarker::Metropolis => String::from("Metropolis"),
			RivalMarker::SubWoofer => String::from("Subwoofer"),
			RivalMarker::Digital => String::from("Digital"),
			RivalMarker::Punk => String::from("Punk"),
			RivalMarker::Leather => String::from("Leather"),
			RivalMarker::Flame2 => String::from("Flame 2"),
			RivalMarker::Camoflage3 => String::from("Camoflage 3"),
			RivalMarker::Wall2 => String::from("Wall 2"),
			RivalMarker::Dangerous3 => String::from("Dangerous 3"),
			RivalMarker::Mechanical2 => String::from("Mechanical 2"),
			RivalMarker::Circuit => String::from("Circuit"),
			RivalMarker::Butterfly => String::from("Butterfly"),
			RivalMarker::Katana => String::from("Katana"),
			RivalMarker::Arrow => String::from("Arrow"),
			RivalMarker::Shuriken => String::from("Shuriken"),
			RivalMarker::HeavyMetal => String::from("Heavy Metal"),
			RivalMarker::Beetle => String::from("Beetle"),
			RivalMarker::Fang => String::from("Fang"),
			RivalMarker::Dragon => String::from("Dragon"),
			RivalMarker::Falcon => String::from("Falcon"),
			RivalMarker::Punk2 => String::from("Punk 2"),
			RivalMarker::Comic2 => String::from("Comic 2"),
			RivalMarker::Joker => String::from("Joker"),
			RivalMarker::Fighter => String::from("Fighter"),
			RivalMarker::Vampire => String::from("Vampire"),
		}
	}
}

impl GetCategory for RivalMarker {
	fn category() -> ItemCategory {
		ItemCategory::CatRivalMarker
	}
}

#[derive(FromPrimitive, ToPrimitive, EnumIter)]
#[repr(u32)]
pub enum CustomFrame {
	Fire1 = 1,
	Fire2 = 2,
	Fire3 = 3,
	Fire4 = 4,
	Fire5 = 5,
	Fire6 = 6,
	Animal1 = 7,
	Animal2,
	Animal3,
	Animal4,
	Animal5,
	Animal6,
	Animal7,
	Aniaml8,
	Animal9,
	Animal10,
	Neon1,
	Neon2,
	Neon3,
	Neon4,
	Neon5,
	Neon6,
	Neon7,
	Neon8,
	Neon9,
	Neon10,
	Neon11,
	Neon12,
	Neon13,
	Neon14,
	Neon15,
	Neon16,
	Neon17,
	Neon18,
	Metal1,
	Metal2,
	Metal3,
	Metal4,
	Metal5,
	Metal6,
	Metal7,
	Dangerous1,
	Dangerous2,
	Dangerous3,
	Dangerous4,
	Dangerous5,
	Dangerous6,
	Dangerous7,
	Floral1,
	Floral2,
	Casual1,
	Casual2,
	Casual3,
	Casual4,
	Casual5,
	Casual6,
	Casual7,
	Casual8,
	Flower1,
	Flower2,
	Flower3,
	Flower4,
	PaintSplash1,
	PaintSplash2,
	PaintSplash3,
	PaintSplash4,
	PaintSplash5,
	PaintSplash6,
	PaintSplash7,
	PaintSplash8,
	Graffiti1,
	Graffiti2,
	Graffiti3,
	Graffiti4,
	TraditionalPattern1,
	TraditionalPattern2,
	TraditionalPattern3,
	TraditionalPattern4,
	TraditionalPattern5,
	TraditionalPattern6,
	TraditionalPattern7,
	TraditionalPattern8,
	Silvercraft1,
	Silvercraft2,
	Silvercraft3,
	Silvercraft4,
	Silvercraft5,
	Silvercraft6,
	Silvercraft7,
	Universe1,
	Universe2,
	Universe3,
	Mechanical1,
	Mechanical2,
	Mechanical3,
	Mechanical4,
	Camoflage1,
	Camoflage2,
	Camoflage3,
	Camoflage4,
	Digital1,
	Digital2,
	Digital3,
	Digital4,
	Wall1,
	Wall2,
	Wall3,
	Wall4,
	Tropical1,
	Tropical2,
	Tropical3,
	Pinstripe1,
	Pinstripe2,
	Pinstripe3,
	Pinstripe4,
	Leather1,
	Leather2,
	Tile1,
	Tile2,
	Tile3,
	Studs1,
	Studs2,
	Studs3,
	Steel1,
	Steel2,
	Steel3,
	Steel4,
	Wood1,
	Wood2,
	Wood3,
	Wood4,
	Sticker1,
	Sticker2,
	Lightning1,
	Lightning2,
	Lightning3,
	Lightning4,
	Lame1,
	Lame2,
	Lame3,
	Lame4,
	Crystal1,
	Crystal2,
	TigerCamo1,
	TigerCamo2,
	TigerCamo3,
	TigerCamo4,
	Lines1,
	Lines2,
	Lines3,
	Lines4,
	Circles1,
	Circles2,
	Circles3,
	Circles4,
	Electron1,
	Electron2,
	Electron3,
	Electron4,
	Flames1,
	Flames2,
	Flames3,
	Flames4,
	Shattered1,
	Shattered2,
	Shattered3,
	Shattered4,
	Particles1,
	Particles2,
	Particles3,
	Particles4,
	LeatherMesh1,
	LeatherMesh2,
	LeatherMesh3,
	LeatherMesh4,
	Rug1,
	Rug2,
	Rug3,
	Rug4,
	DuckCamo1,
	DuckCamo2,
	DuckCamo3,
	DuckCamo4,
}

impl ToString for CustomFrame {
	fn to_string(&self) -> String {
		match self {
			CustomFrame::Fire1 => String::from("Fire 1"),
			CustomFrame::Fire2 => String::from("Fire 2"),
			CustomFrame::Fire3 => String::from("Fire 3"),
			CustomFrame::Fire4 => String::from("Fire 4"),
			CustomFrame::Fire5 => String::from("Fire 5"),
			CustomFrame::Fire6 => String::from("Fire 6"),
			CustomFrame::Animal1 => String::from("Animal 1"),
			CustomFrame::Animal2 => String::from("Animal 2"),
			CustomFrame::Animal3 => String::from("Animal 3"),
			CustomFrame::Animal4 => String::from("Animal 4"),
			CustomFrame::Animal5 => String::from("Animal 5"),
			CustomFrame::Animal6 => String::from("Animal 6"),
			CustomFrame::Animal7 => String::from("Animal 7"),
			CustomFrame::Aniaml8 => String::from("Aniaml 8"),
			CustomFrame::Animal9 => String::from("Animal 9"),
			CustomFrame::Animal10 => String::from("Animal 10"),
			CustomFrame::Neon1 => String::from("Neon 1"),
			CustomFrame::Neon2 => String::from("Neon 2"),
			CustomFrame::Neon3 => String::from("Neon 3"),
			CustomFrame::Neon4 => String::from("Neon 4"),
			CustomFrame::Neon5 => String::from("Neon 5"),
			CustomFrame::Neon6 => String::from("Neon 6"),
			CustomFrame::Neon7 => String::from("Neon 7"),
			CustomFrame::Neon8 => String::from("Neon 8"),
			CustomFrame::Neon9 => String::from("Neon 9"),
			CustomFrame::Neon10 => String::from("Neon 10"),
			CustomFrame::Neon11 => String::from("Neon 11"),
			CustomFrame::Neon12 => String::from("Neon 12"),
			CustomFrame::Neon13 => String::from("Neon 13"),
			CustomFrame::Neon14 => String::from("Neon 14"),
			CustomFrame::Neon15 => String::from("Neon 15"),
			CustomFrame::Neon16 => String::from("Neon 16"),
			CustomFrame::Neon17 => String::from("Neon 17"),
			CustomFrame::Neon18 => String::from("Neon 18"),
			CustomFrame::Metal1 => String::from("Metal 1"),
			CustomFrame::Metal2 => String::from("Metal 2"),
			CustomFrame::Metal3 => String::from("Metal 3"),
			CustomFrame::Metal4 => String::from("Metal 4"),
			CustomFrame::Metal5 => String::from("Metal 5"),
			CustomFrame::Metal6 => String::from("Metal 6"),
			CustomFrame::Metal7 => String::from("Metal 7"),
			CustomFrame::Dangerous1 => String::from("Dangerous 1"),
			CustomFrame::Dangerous2 => String::from("Dangerous 2"),
			CustomFrame::Dangerous3 => String::from("Dangerous 3"),
			CustomFrame::Dangerous4 => String::from("Dangerous 4"),
			CustomFrame::Dangerous5 => String::from("Dangerous 5"),
			CustomFrame::Dangerous6 => String::from("Dangerous 6"),
			CustomFrame::Dangerous7 => String::from("Dangerous 7"),
			CustomFrame::Floral1 => String::from("Floral 1"),
			CustomFrame::Floral2 => String::from("Floral 2"),
			CustomFrame::Casual1 => String::from("Casual 1"),
			CustomFrame::Casual2 => String::from("Casual 2"),
			CustomFrame::Casual3 => String::from("Casual 3"),
			CustomFrame::Casual4 => String::from("Casual 4"),
			CustomFrame::Casual5 => String::from("Casual 5"),
			CustomFrame::Casual6 => String::from("Casual 6"),
			CustomFrame::Casual7 => String::from("Casual 7"),
			CustomFrame::Casual8 => String::from("Casual 8"),
			CustomFrame::Flower1 => String::from("Flower 1"),
			CustomFrame::Flower2 => String::from("Flower 2"),
			CustomFrame::Flower3 => String::from("Flower 3"),
			CustomFrame::Flower4 => String::from("Flower 4"),
			CustomFrame::PaintSplash1 => String::from("Paint Splash 1"),
			CustomFrame::PaintSplash2 => String::from("Paint Splash 2"),
			CustomFrame::PaintSplash3 => String::from("Paint Splash 3"),
			CustomFrame::PaintSplash4 => String::from("Paint Splash 4"),
			CustomFrame::PaintSplash5 => String::from("Paint Splash 5"),
			CustomFrame::PaintSplash6 => String::from("Paint Splash 6"),
			CustomFrame::PaintSplash7 => String::from("Paint Splash 7"),
			CustomFrame::PaintSplash8 => String::from("Paint Splash 8"),
			CustomFrame::Graffiti1 => String::from("Graffiti 1"),
			CustomFrame::Graffiti2 => String::from("Graffiti 2"),
			CustomFrame::Graffiti3 => String::from("Graffiti 3"),
			CustomFrame::Graffiti4 => String::from("Graffiti 4"),
			CustomFrame::TraditionalPattern1 => String::from("Traditional Pattern 1"),
			CustomFrame::TraditionalPattern2 => String::from("Traditional Pattern 2"),
			CustomFrame::TraditionalPattern3 => String::from("Traditional Pattern 3"),
			CustomFrame::TraditionalPattern4 => String::from("Traditional Pattern 4"),
			CustomFrame::TraditionalPattern5 => String::from("Traditional Pattern 5"),
			CustomFrame::TraditionalPattern6 => String::from("Traditional Pattern 6"),
			CustomFrame::TraditionalPattern7 => String::from("Traditional Pattern 7"),
			CustomFrame::TraditionalPattern8 => String::from("Traditional Pattern 8"),
			CustomFrame::Silvercraft1 => String::from("Silvercraft 1"),
			CustomFrame::Silvercraft2 => String::from("Silvercraft 2"),
			CustomFrame::Silvercraft3 => String::from("Silvercraft 3"),
			CustomFrame::Silvercraft4 => String::from("Silvercraft 4"),
			CustomFrame::Silvercraft5 => String::from("Silvercraft 5"),
			CustomFrame::Silvercraft6 => String::from("Silvercraft 6"),
			CustomFrame::Silvercraft7 => String::from("Silvercraft 7"),
			CustomFrame::Universe1 => String::from("Universe 1"),
			CustomFrame::Universe2 => String::from("Universe 2"),
			CustomFrame::Universe3 => String::from("Universe 3"),
			CustomFrame::Mechanical1 => String::from("Mechanical 1"),
			CustomFrame::Mechanical2 => String::from("Mechanical 2"),
			CustomFrame::Mechanical3 => String::from("Mechanical 3"),
			CustomFrame::Mechanical4 => String::from("Mechanical 4"),
			CustomFrame::Camoflage1 => String::from("Camoflage 1"),
			CustomFrame::Camoflage2 => String::from("Camoflage 2"),
			CustomFrame::Camoflage3 => String::from("Camoflage 3"),
			CustomFrame::Camoflage4 => String::from("Camoflage 4"),
			CustomFrame::Digital1 => String::from("Digital 1"),
			CustomFrame::Digital2 => String::from("Digital 2"),
			CustomFrame::Digital3 => String::from("Digital 3"),
			CustomFrame::Digital4 => String::from("Digital 4"),
			CustomFrame::Wall1 => String::from("Wall 1"),
			CustomFrame::Wall2 => String::from("Wall 2"),
			CustomFrame::Wall3 => String::from("Wall 3"),
			CustomFrame::Wall4 => String::from("Wall 4"),
			CustomFrame::Tropical1 => String::from("Tropical 1"),
			CustomFrame::Tropical2 => String::from("Tropical 2"),
			CustomFrame::Tropical3 => String::from("Tropical 3"),
			CustomFrame::Pinstripe1 => String::from("Pinstripe 1"),
			CustomFrame::Pinstripe2 => String::from("Pinstripe 2"),
			CustomFrame::Pinstripe3 => String::from("Pinstripe 3"),
			CustomFrame::Pinstripe4 => String::from("Pinstripe 4"),
			CustomFrame::Leather1 => String::from("Leather 1"),
			CustomFrame::Leather2 => String::from("Leather 2"),
			CustomFrame::Tile1 => String::from("Tile 1"),
			CustomFrame::Tile2 => String::from("Tile 2"),
			CustomFrame::Tile3 => String::from("Tile 3"),
			CustomFrame::Studs1 => String::from("Studs 1"),
			CustomFrame::Studs2 => String::from("Studs 2"),
			CustomFrame::Studs3 => String::from("Studs 3"),
			CustomFrame::Steel1 => String::from("Steel 1"),
			CustomFrame::Steel2 => String::from("Steel 2"),
			CustomFrame::Steel3 => String::from("Steel 3"),
			CustomFrame::Steel4 => String::from("Steel 4"),
			CustomFrame::Wood1 => String::from("Wood 1"),
			CustomFrame::Wood2 => String::from("Wood 2"),
			CustomFrame::Wood3 => String::from("Wood 3"),
			CustomFrame::Wood4 => String::from("Wood 4"),
			CustomFrame::Sticker1 => String::from("Sticker 1"),
			CustomFrame::Sticker2 => String::from("Sticker 2"),
			CustomFrame::Lightning1 => String::from("Lightning 1"),
			CustomFrame::Lightning2 => String::from("Lightning 2"),
			CustomFrame::Lightning3 => String::from("Lightning 3"),
			CustomFrame::Lightning4 => String::from("Lightning 4"),
			CustomFrame::Lame1 => String::from("Lame 1"),
			CustomFrame::Lame2 => String::from("Lame 2"),
			CustomFrame::Lame3 => String::from("Lame 3"),
			CustomFrame::Lame4 => String::from("Lame 4"),
			CustomFrame::Crystal1 => String::from("Crystal 1"),
			CustomFrame::Crystal2 => String::from("Crystal 2"),
			CustomFrame::TigerCamo1 => String::from("Tiger Camo 1"),
			CustomFrame::TigerCamo2 => String::from("Tiger Camo 2"),
			CustomFrame::TigerCamo3 => String::from("Tiger Camo 3"),
			CustomFrame::TigerCamo4 => String::from("Tiger Camo 4"),
			CustomFrame::Lines1 => String::from("Lines 1"),
			CustomFrame::Lines2 => String::from("Lines 2"),
			CustomFrame::Lines3 => String::from("Lines 3"),
			CustomFrame::Lines4 => String::from("Lines 4"),
			CustomFrame::Circles1 => String::from("Circles 1"),
			CustomFrame::Circles2 => String::from("Circles 2"),
			CustomFrame::Circles3 => String::from("Circles 3"),
			CustomFrame::Circles4 => String::from("Circles 4"),
			CustomFrame::Electron1 => String::from("Electron 1"),
			CustomFrame::Electron2 => String::from("Electron 2"),
			CustomFrame::Electron3 => String::from("Electron 3"),
			CustomFrame::Electron4 => String::from("Electron 4"),
			CustomFrame::Flames1 => String::from("Flames 1"),
			CustomFrame::Flames2 => String::from("Flames 2"),
			CustomFrame::Flames3 => String::from("Flames 3"),
			CustomFrame::Flames4 => String::from("Flames 4"),
			CustomFrame::Shattered1 => String::from("Shattered 1"),
			CustomFrame::Shattered2 => String::from("Shattered 2"),
			CustomFrame::Shattered3 => String::from("Shattered 3"),
			CustomFrame::Shattered4 => String::from("Shattered 4"),
			CustomFrame::Particles1 => String::from("Particles 1"),
			CustomFrame::Particles2 => String::from("Particles 2"),
			CustomFrame::Particles3 => String::from("Particles 3"),
			CustomFrame::Particles4 => String::from("Particles 4"),
			CustomFrame::LeatherMesh1 => String::from("Leather Mesh 1"),
			CustomFrame::LeatherMesh2 => String::from("Leather Mesh 2"),
			CustomFrame::LeatherMesh3 => String::from("Leather Mesh 3"),
			CustomFrame::LeatherMesh4 => String::from("Leather Mesh 4"),
			CustomFrame::Rug1 => String::from("Rug 1"),
			CustomFrame::Rug2 => String::from("Rug 2"),
			CustomFrame::Rug3 => String::from("Rug 3"),
			CustomFrame::Rug4 => String::from("Rug 4"),
			CustomFrame::DuckCamo1 => String::from("Duck Camo 1"),
			CustomFrame::DuckCamo2 => String::from("Duck Camo 2"),
			CustomFrame::DuckCamo3 => String::from("Duck Camo 3"),
			CustomFrame::DuckCamo4 => String::from("Duck Camo 4"),
		}
	}
}

impl GetCategory for CustomFrame {
	fn category() -> ItemCategory {
		ItemCategory::CatCustomFrame
	}
}

#[allow(non_snake_case)]
#[derive(Debug, PartialEq, Clone)]
pub struct DressUpItem {
	pub kind: u32,
	pub item_type: u32,
	pub game_id: u32,
	pub category: ItemCategory,
	pub server_id: u32,
	pub du_number: u32,
	pub limited_du: bool,
	pub unk_1C: u32,
	pub name: &'static str,
}

impl Into<CarItem> for DressUpItem {
	fn into(self) -> CarItem {
		CarItem {
			category: self.category.into(),
			item_id: self.server_id,
			amount: Some(1),
		}
	}
}

pub const DU_ITEMS: [DressUpItem; 107] = [
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 1,
		category: ItemCategory::CatAero,
		server_id: 1,
		du_number: 1,
		limited_du: false,
		unk_1C: 2,
		name: "Aero Parts Set A",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 2,
		category: ItemCategory::CatAero,
		server_id: 2,
		du_number: 25,
		limited_du: false,
		unk_1C: 2,
		name: "Aero Parts Set B",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 3,
		category: ItemCategory::CatAero,
		server_id: 3,
		du_number: 50,
		limited_du: false,
		unk_1C: 2,
		name: "Aero Parts Set C",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 1,
		category: ItemCategory::CatAeroLimited,
		server_id: 4,
		du_number: 1,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 2,
		category: ItemCategory::CatAeroLimited,
		server_id: 5,
		du_number: 5,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 3,
		category: ItemCategory::CatAeroLimited,
		server_id: 6,
		du_number: 10,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 4,
		category: ItemCategory::CatAeroLimited,
		server_id: 7,
		du_number: 15,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 5,
		category: ItemCategory::CatAeroLimited,
		server_id: 8,
		du_number: 20,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 6,
		category: ItemCategory::CatAeroLimited,
		server_id: 9,
		du_number: 25,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 7,
		category: ItemCategory::CatAeroLimited,
		server_id: 10,
		du_number: 30,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 8,
		category: ItemCategory::CatAeroLimited,
		server_id: 1,
		du_number: 40,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 9,
		category: ItemCategory::CatAeroLimited,
		server_id: 2,
		du_number: 45,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 10,
		category: ItemCategory::CatAeroLimited,
		server_id: 3,
		du_number: 50,
		limited_du: false,
		unk_1C: 1,
		name: "CatAeroLimited (UNUSED)",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 1,
		category: ItemCategory::CatAeroFullset,
		server_id: 4,
		du_number: 1,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set A",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 2,
		category: ItemCategory::CatAeroFullset,
		server_id: 5,
		du_number: 5,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set B",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 3,
		category: ItemCategory::CatAeroFullset,
		server_id: 6,
		du_number: 10,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set C",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 4,
		category: ItemCategory::CatAeroFullset,
		server_id: 7,
		du_number: 15,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set D",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 5,
		category: ItemCategory::CatAeroFullset,
		server_id: 8,
		du_number: 20,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set E",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 6,
		category: ItemCategory::CatAeroFullset,
		server_id: 9,
		du_number: 25,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set F",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 7,
		category: ItemCategory::CatAeroFullset,
		server_id: 10,
		du_number: 30,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set G",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 8,
		category: ItemCategory::CatAeroFullset,
		server_id: 11,
		du_number: 35,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set H",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 9,
		category: ItemCategory::CatAeroFullset,
		server_id: 1,
		du_number: 40,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set I",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 10,
		category: ItemCategory::CatAeroFullset,
		server_id: 2,
		du_number: 45,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set J",
	},
	DressUpItem {
		kind: 1,
		item_type: 1,
		game_id: 11,
		category: ItemCategory::CatAeroFullset,
		server_id: 3,
		du_number: 50,
		limited_du: false,
		unk_1C: 0,
		name: "Aero Parts Set K",
	},
	DressUpItem {
		kind: 1,
		item_type: 2,
		game_id: 1,
		category: ItemCategory::CatBonnet,
		server_id: 1,
		du_number: 3,
		limited_du: false,
		unk_1C: 3,
		name: "FRP Bonnet A",
	},
	DressUpItem {
		kind: 1,
		item_type: 2,
		game_id: 2,
		category: ItemCategory::CatBonnet,
		server_id: 2,
		du_number: 9,
		limited_du: false,
		unk_1C: 3,
		name: "FRP Bonnet B",
	},
	DressUpItem {
		kind: 1,
		item_type: 2,
		game_id: 3,
		category: ItemCategory::CatBonnet,
		server_id: 3,
		du_number: 17,
		limited_du: false,
		unk_1C: 3,
		name: "FRP Bonnet C",
	},
	DressUpItem {
		kind: 1,
		item_type: 2,
		game_id: 4,
		category: ItemCategory::CatBonnet,
		server_id: 4,
		du_number: 21,
		limited_du: false,
		unk_1C: 3,
		name: "Carbon Bonnet (Original Shape)",
	},
	DressUpItem {
		kind: 1,
		item_type: 2,
		game_id: 5,
		category: ItemCategory::CatBonnet,
		server_id: 5,
		du_number: 29,
		limited_du: false,
		unk_1C: 3,
		name: "Carbon Bonnet A",
	},
	DressUpItem {
		kind: 1,
		item_type: 2,
		game_id: 6,
		category: ItemCategory::CatBonnet,
		server_id: 6,
		du_number: 35,
		limited_du: false,
		unk_1C: 3,
		name: "Carbon Bonnet B",
	},
	DressUpItem {
		kind: 1,
		item_type: 2,
		game_id: 7,
		category: ItemCategory::CatBonnet,
		server_id: 7,
		du_number: 44,
		limited_du: false,
		unk_1C: 3,
		name: "Carbon Bonnet C",
	},
	DressUpItem {
		kind: 1,
		item_type: 2,
		game_id: 8,
		category: ItemCategory::CatBonnet,
		server_id: 8,
		du_number: 53,
		limited_du: false,
		unk_1C: 3,
		name: "FRP Bonnet D",
	},
	DressUpItem {
		kind: 1,
		item_type: 3,
		game_id: 1,
		category: ItemCategory::CatWing,
		server_id: 1,
		du_number: 5,
		limited_du: false,
		unk_1C: 3,
		name: "GT Wing A",
	},
	DressUpItem {
		kind: 1,
		item_type: 3,
		game_id: 2,
		category: ItemCategory::CatWing,
		server_id: 2,
		du_number: 13,
		limited_du: false,
		unk_1C: 3,
		name: "Exclusive Wing A",
	},
	DressUpItem {
		kind: 1,
		item_type: 3,
		game_id: 3,
		category: ItemCategory::CatWing,
		server_id: 3,
		du_number: 19,
		limited_du: false,
		unk_1C: 3,
		name: "GT Wing B",
	},
	DressUpItem {
		kind: 1,
		item_type: 3,
		game_id: 4,
		category: ItemCategory::CatWing,
		server_id: 4,
		du_number: 23,
		limited_du: false,
		unk_1C: 3,
		name: "Exclusive Wing B",
	},
	DressUpItem {
		kind: 1,
		item_type: 3,
		game_id: 5,
		category: ItemCategory::CatWing,
		server_id: 5,
		du_number: 31,
		limited_du: false,
		unk_1C: 3,
		name: "GT Wing C",
	},
	DressUpItem {
		kind: 1,
		item_type: 3,
		game_id: 6,
		category: ItemCategory::CatWing,
		server_id: 6,
		du_number: 38,
		limited_du: false,
		unk_1C: 3,
		name: "GT Wing D",
	},
	DressUpItem {
		kind: 1,
		item_type: 3,
		game_id: 7,
		category: ItemCategory::CatWing,
		server_id: 7,
		du_number: 47,
		limited_du: false,
		unk_1C: 3,
		name: "Exclusive Wing C",
	},
	DressUpItem {
		kind: 1,
		item_type: 3,
		game_id: 8,
		category: ItemCategory::CatWing,
		server_id: 8,
		du_number: 57,
		limited_du: false,
		unk_1C: 3,
		name: "GT Wing E",
	},
	DressUpItem {
		kind: 1,
		item_type: 4,
		game_id: 1,
		category: ItemCategory::CatMirror,
		server_id: 1,
		du_number: 7,
		limited_du: false,
		unk_1C: 3,
		name: "Aero Mirror",
	},
	DressUpItem {
		kind: 1,
		item_type: 4,
		game_id: 2,
		category: ItemCategory::CatMirror,
		server_id: 2,
		du_number: 33,
		limited_du: false,
		unk_1C: 3,
		name: "Carbon Aero Mirror",
	},
	DressUpItem {
		kind: 1,
		item_type: 5,
		game_id: 1,
		category: ItemCategory::CatTrunk,
		server_id: 1,
		du_number: 15,
		limited_du: false,
		unk_1C: 3,
		name: "Carbon Trunk",
	},
	DressUpItem {
		kind: 2,
		item_type: 6,
		game_id: 1,
		category: ItemCategory::CatWheel,
		server_id: 48,
		du_number: 54,
		limited_du: false,
		unk_1C: 3,
		name: "BBS RI-A",
	},
	DressUpItem {
		kind: 2,
		item_type: 6,
		game_id: 2,
		category: ItemCategory::CatWheel,
		server_id: 50,
		du_number: 56,
		limited_du: false,
		unk_1C: 3,
		name: "BBS RG-R",
	},
	DressUpItem {
		kind: 2,
		item_type: 6,
		game_id: 3,
		category: ItemCategory::CatWheel,
		server_id: 53,
		du_number: 58,
		limited_du: false,
		unk_1C: 3,
		name: "BBS LM",
	},
	DressUpItem {
		kind: 2,
		item_type: 6,
		game_id: 4,
		category: ItemCategory::CatWheel,
		server_id: 49,
		du_number: 60,
		limited_du: false,
		unk_1C: 3,
		name: "BBS FS",
	},
	DressUpItem {
		kind: 2,
		item_type: 6,
		game_id: 5,
		category: ItemCategory::CatWheel,
		server_id: 51,
		du_number: 62,
		limited_du: false,
		unk_1C: 3,
		name: "BBS Super-RS",
	},
	DressUpItem {
		kind: 2,
		item_type: 6,
		game_id: 6,
		category: ItemCategory::CatWheel,
		server_id: 47,
		du_number: 64,
		limited_du: false,
		unk_1C: 3,
		name: "BBS RI-D",
	},
	DressUpItem {
		kind: 2,
		item_type: 6,
		game_id: 7,
		category: ItemCategory::CatWheel,
		server_id: 54,
		du_number: 66,
		limited_du: false,
		unk_1C: 3,
		name: "BBS FZ-MG",
	},
	DressUpItem {
		kind: 2,
		item_type: 7,
		game_id: 1,
		category: ItemCategory::CatWheel,
		server_id: 28,
		du_number: 4,
		limited_du: false,
		unk_1C: 3,
		name: "ENKEI PFM1",
	},
	DressUpItem {
		kind: 2,
		item_type: 7,
		game_id: 2,
		category: ItemCategory::CatWheel,
		server_id: 29,
		du_number: 12,
		limited_du: false,
		unk_1C: 3,
		name: "ENKEI RACING RPF1",
	},
	DressUpItem {
		kind: 2,
		item_type: 7,
		game_id: 3,
		category: ItemCategory::CatWheel,
		server_id: 32,
		du_number: 21,
		limited_du: true,
		unk_1C: 3,
		name: "ENKEI RACING RS05",
	},
	DressUpItem {
		kind: 2,
		item_type: 7,
		game_id: 4,
		category: ItemCategory::CatWheel,
		server_id: 30,
		du_number: 24,
		limited_du: false,
		unk_1C: 3,
		name: "ENKEI NT03RR",
	},
	DressUpItem {
		kind: 2,
		item_type: 7,
		game_id: 6,
		category: ItemCategory::CatWheel,
		server_id: 33,
		du_number: 39,
		limited_du: true,
		unk_1C: 3,
		name: "ENKEI RACING JS+M",
	},
	DressUpItem {
		kind: 2,
		item_type: 7,
		game_id: 7,
		category: ItemCategory::CatWheel,
		server_id: 31,
		du_number: 46,
		limited_du: false,
		unk_1C: 3,
		name: "ENKEI WPS JL01",
	},
	DressUpItem {
		kind: 2,
		item_type: 7,
		game_id: 8,
		category: ItemCategory::CatWheel,
		server_id: 34,
		du_number: 51,
		limited_du: true,
		unk_1C: 3,
		name: "ENKEI ES-TARMAC",
	},
	DressUpItem {
		kind: 2,
		item_type: 7,
		game_id: 9,
		category: ItemCategory::CatWheel,
		server_id: 35,
		du_number: 63,
		limited_du: true,
		unk_1C: 3,
		name: "ENKEI PERFORMANCE PF07",
	},
	DressUpItem {
		kind: 2,
		item_type: 7,
		game_id: 5,
		category: ItemCategory::CatWheel,
		server_id: 36,
		du_number: 30,
		limited_du: true,
		unk_1C: 3,
		name: "ENKEI SPORT RC-T4",
	},
	DressUpItem {
		kind: 2,
		item_type: 8,
		game_id: 1,
		category: ItemCategory::CatWheel,
		server_id: 37,
		du_number: 14,
		limited_du: false,
		unk_1C: 3,
		name: "OZ CRONO-3",
	},
	DressUpItem {
		kind: 2,
		item_type: 8,
		game_id: 3,
		category: ItemCategory::CatWheel,
		server_id: 38,
		du_number: 22,
		limited_du: false,
		unk_1C: 3,
		name: "OZ RALLY RACING",
	},
	DressUpItem {
		kind: 2,
		item_type: 8,
		game_id: 4,
		category: ItemCategory::CatWheel,
		server_id: 40,
		du_number: 36,
		limited_du: true,
		unk_1C: 3,
		name: "OZ LEGGENDA",
	},
	DressUpItem {
		kind: 2,
		item_type: 8,
		game_id: 5,
		category: ItemCategory::CatWheel,
		server_id: 39,
		du_number: 37,
		limited_du: false,
		unk_1C: 3,
		name: "OZ FORGIATA GT",
	},
	DressUpItem {
		kind: 2,
		item_type: 8,
		game_id: 6,
		category: ItemCategory::CatWheel,
		server_id: 41,
		du_number: 44,
		limited_du: true,
		unk_1C: 3,
		name: "OZ SUPERTURISMO-LM",
	},
	DressUpItem {
		kind: 2,
		item_type: 8,
		game_id: 8,
		category: ItemCategory::CatWheel,
		server_id: 42,
		du_number: 55,
		limited_du: true,
		unk_1C: 3,
		name: "OZ FORMULA-HLT",
	},
	DressUpItem {
		kind: 2,
		item_type: 8,
		game_id: 9,
		category: ItemCategory::CatWheel,
		server_id: 43,
		du_number: 67,
		limited_du: true,
		unk_1C: 3,
		name: "OZ ZEUS GLT FORGED",
	},
	DressUpItem {
		kind: 2,
		item_type: 8,
		game_id: 7,
		category: ItemCategory::CatWheel,
		server_id: 44,
		du_number: 48,
		limited_du: true,
		unk_1C: 3,
		name: "OZ TORINO",
	},
	DressUpItem {
		kind: 2,
		item_type: 8,
		game_id: 2,
		category: ItemCategory::CatWheel,
		server_id: 46,
		du_number: 18,
		limited_du: true,
		unk_1C: 3,
		name: "OZ ULTRA LEGGERA",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 1,
		category: ItemCategory::CatWheel,
		server_id: 16,
		du_number: 2,
		limited_du: false,
		unk_1C: 3,
		name: "RAYS CE28N",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 2,
		category: ItemCategory::CatWheel,
		server_id: 17,
		du_number: 8,
		limited_du: false,
		unk_1C: 3,
		name: "RAYS GRAM LIGHTS 57ANA",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 3,
		category: ItemCategory::CatWheel,
		server_id: 22,
		du_number: 15,
		limited_du: true,
		unk_1C: 3,
		name: "RAYS VR GT - TYPE M",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 4,
		category: ItemCategory::CatWheel,
		server_id: 18,
		du_number: 20,
		limited_du: false,
		unk_1C: 3,
		name: "RAYS LUCIANNA STRATAGIA",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 5,
		category: ItemCategory::CatWheel,
		server_id: 19,
		du_number: 28,
		limited_du: false,
		unk_1C: 3,
		name: "RAYS GRAM LIGHTS 57D",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 6,
		category: ItemCategory::CatWheel,
		server_id: 27,
		du_number: 34,
		limited_du: false,
		unk_1C: 3,
		name: "RAYS VOLK RACING ZE40",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 8,
		category: ItemCategory::CatWheel,
		server_id: 23,
		du_number: 45,
		limited_du: true,
		unk_1C: 3,
		name: "RAYS GABBERNA",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 9,
		category: ItemCategory::CatWheel,
		server_id: 20,
		du_number: 40,
		limited_du: false,
		unk_1C: 3,
		name: "RAUS VOLK RACING TE37 SAGA",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 10,
		category: ItemCategory::CatWheel,
		server_id: 21,
		du_number: 49,
		limited_du: false,
		unk_1C: 3,
		name: "RAYS VOLK RACING TE037 DURA",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 11,
		category: ItemCategory::CatWheel,
		server_id: 24,
		du_number: 59,
		limited_du: true,
		unk_1C: 3,
		name: "RAYS VR RE30",
	},
	DressUpItem {
		kind: 2,
		item_type: 9,
		game_id: 7,
		category: ItemCategory::CatWheel,
		server_id: 25,
		du_number: 35,
		limited_du: true,
		unk_1C: 3,
		name: "RAYS GRAM LIGHTS 57F-PRO",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 1,
		category: ItemCategory::CatWheel,
		server_id: 1,
		du_number: 6,
		limited_du: false,
		unk_1C: 3,
		name: "YOKOHAMA ADVAN RACING RCIII",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 2,
		category: ItemCategory::CatWheel,
		server_id: 2,
		du_number: 10,
		limited_du: false,
		unk_1C: 3,
		name: "YOKOHAMA ADVAN RACING TCIII",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 3,
		category: ItemCategory::CatWheel,
		server_id: 3,
		du_number: 16,
		limited_du: false,
		unk_1C: 3,
		name: "YOKOHAMA SUPER ADVAN RACING VER.2",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 4,
		category: ItemCategory::CatWheel,
		server_id: 4,
		du_number: 26,
		limited_du: false,
		unk_1C: 3,
		name: "YOKOHAMA ADVAN RACING RG-D2",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 5,
		category: ItemCategory::CatWheel,
		server_id: 7,
		du_number: 29,
		limited_du: true,
		unk_1C: 3,
		name: "YOKOHAMA ADVAN RACING RS-D",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 6,
		category: ItemCategory::CatWheel,
		server_id: 5,
		du_number: 32,
		limited_du: false,
		unk_1C: 3,
		name: "YOKOHAMA ADVAN RACING RGIII",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 7,
		category: ItemCategory::CatWheel,
		server_id: 8,
		du_number: 42,
		limited_du: true,
		unk_1C: 3,
		name: "YOKOHAMA AVS MODEL T6",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 9,
		category: ItemCategory::CatWheel,
		server_id: 6,
		du_number: 52,
		limited_du: false,
		unk_1C: 3,
		name: "YOKOHAMA ADVAN RACING RSII",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 10,
		category: ItemCategory::CatWheel,
		server_id: 9,
		du_number: 65,
		limited_du: true,
		unk_1C: 3,
		name: "YOKOHAMA ADVAN RACING GT",
	},
	DressUpItem {
		kind: 2,
		item_type: 10,
		game_id: 8,
		category: ItemCategory::CatWheel,
		server_id: 10,
		du_number: 43,
		limited_du: true,
		unk_1C: 3,
		name: "YOKOHAMA AVS MODEL T5",
	},
	DressUpItem {
		kind: 2,
		item_type: 12,
		game_id: 3,
		category: ItemCategory::CatWheel,
		server_id: 56,
		du_number: 43,
		limited_du: false,
		unk_1C: 3,
		name: "WORK EMOTION ZR10",
	},
	DressUpItem {
		kind: 2,
		item_type: 12,
		game_id: 2,
		category: ItemCategory::CatWheel,
		server_id: 57,
		du_number: 30,
		limited_du: false,
		unk_1C: 3,
		name: "WORK SEEKER GX",
	},
	DressUpItem {
		kind: 2,
		item_type: 12,
		game_id: 1,
		category: ItemCategory::CatWheel,
		server_id: 58,
		du_number: 18,
		limited_du: false,
		unk_1C: 3,
		name: "WORK ZEAST ST3",
	},
	DressUpItem {
		kind: 3,
		item_type: 13,
		game_id: 1,
		category: ItemCategory::CatNeon,
		server_id: 1,
		du_number: 36,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Arch Green",
	},
	DressUpItem {
		kind: 3,
		item_type: 13,
		game_id: 2,
		category: ItemCategory::CatNeon,
		server_id: 2,
		du_number: 42,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Arch Blue",
	},
	DressUpItem {
		kind: 3,
		item_type: 13,
		game_id: 3,
		category: ItemCategory::CatNeon,
		server_id: 3,
		du_number: 48,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Arch Red",
	},
	DressUpItem {
		kind: 3,
		item_type: 13,
		game_id: 4,
		category: ItemCategory::CatNeon,
		server_id: 4,
		du_number: 55,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Arch Yellow",
	},
	DressUpItem {
		kind: 3,
		item_type: 13,
		game_id: 5,
		category: ItemCategory::CatNeon,
		server_id: 5,
		du_number: 63,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Arch Purple",
	},
	DressUpItem {
		kind: 3,
		item_type: 14,
		game_id: 1,
		category: ItemCategory::CatNeon,
		server_id: 6,
		du_number: 39,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Tribal Green",
	},
	DressUpItem {
		kind: 3,
		item_type: 14,
		game_id: 2,
		category: ItemCategory::CatNeon,
		server_id: 7,
		du_number: 45,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Tribal Blue",
	},
	DressUpItem {
		kind: 3,
		item_type: 14,
		game_id: 3,
		category: ItemCategory::CatNeon,
		server_id: 8,
		du_number: 51,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Tribal Red",
	},
	DressUpItem {
		kind: 3,
		item_type: 14,
		game_id: 4,
		category: ItemCategory::CatNeon,
		server_id: 9,
		du_number: 59,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Tribal Yellow",
	},
	DressUpItem {
		kind: 3,
		item_type: 14,
		game_id: 5,
		category: ItemCategory::CatNeon,
		server_id: 10,
		du_number: 67,
		limited_du: false,
		unk_1C: 3,
		name: "Neon Tube Tribal Purple",
	},
	DressUpItem {
		kind: 3,
		item_type: 15,
		game_id: 1,
		category: ItemCategory::CatNumberPlate,
		server_id: 1,
		du_number: 11,
		limited_du: false,
		unk_1C: 3,
		name: "License Plate Frame A",
	},
	DressUpItem {
		kind: 3,
		item_type: 15,
		game_id: 2,
		category: ItemCategory::CatNumberPlate,
		server_id: 2,
		du_number: 27,
		limited_du: false,
		unk_1C: 3,
		name: "License Plate Frame B",
	},
	DressUpItem {
		kind: 3,
		item_type: 15,
		game_id: 3,
		category: ItemCategory::CatNumberPlate,
		server_id: 3,
		du_number: 41,
		limited_du: false,
		unk_1C: 3,
		name: "License Plate Frame C",
	},
	DressUpItem {
		kind: 3,
		item_type: 15,
		game_id: 4,
		category: ItemCategory::CatNumberPlate,
		server_id: 4,
		du_number: 61,
		limited_du: false,
		unk_1C: 3,
		name: "License Plate Frame D",
	},
	DressUpItem {
		kind: 4,
		item_type: 16,
		game_id: 1,
		category: ItemCategory::CatGtWing,
		server_id: 1,
		du_number: 65,
		limited_du: false,
		unk_1C: 3,
		name: "Custom GT Wing",
	},
];
